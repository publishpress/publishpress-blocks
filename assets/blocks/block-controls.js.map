{"version":3,"file":"block-controls.js","mappings":"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","sources":["webpack://advanced-gutenberg/./node_modules/hour-convert/index.js","webpack://advanced-gutenberg/./node_modules/classnames/index.js","webpack://advanced-gutenberg/webpack/bootstrap","webpack://advanced-gutenberg/webpack/runtime/compat get default export","webpack://advanced-gutenberg/webpack/runtime/define property getters","webpack://advanced-gutenberg/webpack/runtime/hasOwnProperty shorthand","webpack://advanced-gutenberg/./assets/blocks/0-adv-components/datetime.jsx","webpack://advanced-gutenberg/./assets/blocks/0-adv-components/utils.jsx","webpack://advanced-gutenberg/./assets/blocks/block-controls/block-controls.jsx"],"sourcesContent":["'use strict';\n\nmodule.exports = {\n\n    /**\n     * Convert 24-hour time to 12-hour format.\n     *\n     * @param {number} hour Hour to convert (0-23)\n     * @return {object} { hour, meridiem } (meridian is also returned for backwards compatibility)\n     */\n    to12Hour: function to12Hour(hour) {\n        var meridiem = hour < 12 ? 'am' : 'pm';\n        return {\n            hour: ((hour + 11) % 12 + 1),\n            meridiem: meridiem,\n            meridian: meridiem\n        };\n    },\n\n    /**\n     * Convert 12-hour time to 24-hour format.\n     *\n     * @param {object} time Time object\n     * @param {number} time.hour Hour to convert (1-12)\n     * @param {string} time.meridiem Hour meridiem (am/pm). 'time.meridian' is\n     *  supported for backwards compatibility.\n     * @return {number}\n     */\n    to24Hour: function to24Hour(time) {\n        var meridiem = time.meridiem || time.meridian;\n        return (meridiem === 'am' ? 0 : 12) + (time.hour % 12);\n    }\n};\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import hourConvert from 'hour-convert';\r\n\r\nconst { ButtonGroup, Button, DateTimePicker, TextControl, CheckboxControl, Popover, Tooltip, SelectControl, Icon } = wp.components;\r\nconst { Component, Fragment, useState } = wp.element;\r\nconst { __, _x } = wp.i18n;\r\nconst { applyFilters } = wp.hooks;\r\n\r\nexport function AdvDateTimeControl(props) {\r\n    const [popupState, setPopupState] = useState( false );\r\n    const togglePopup = () => {\r\n        setPopupState( ! popupState );\r\n    };\r\n\r\n    const {\r\n        buttonLabel,\r\n        dateLabel,\r\n        date,\r\n        onChangeDate,\r\n        onDateClear,\r\n        onInvalidDate,\r\n        placement,\r\n        offset\r\n    } = props;\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"advgb-advcalendar-control\">\r\n                <label>\r\n                    { dateLabel }\r\n                </label>\r\n                <div>\r\n                    <Button\r\n                        isLink\r\n                        icon=\"calendar\"\r\n                        onClick={ togglePopup }\r\n                    >\r\n                        <Tooltip text={ __( 'Change date', 'advanced-gutenberg' ) }>\r\n                            <span>\r\n                                { date ? moment( date ).format( \"MMMM DD YYYY, h:mm a\" ) : buttonLabel }\r\n                            </span>\r\n                        </Tooltip>\r\n                    </Button>\r\n                    { date &&\r\n        \t\t\t\t<Button\r\n        \t\t\t\t\ticon=\"no-alt\"\r\n                            className=\"advgb-advcalendar-remove-icon\"\r\n        \t\t\t\t\tonClick={ () => onDateClear() }\r\n        \t\t\t\t/>\r\n        \t\t\t}\r\n                </div>\r\n            </div>\r\n            { popupState &&\r\n                <Popover\r\n                    className=\"advgb-advcalendar-popover\"\r\n                    onClose={ setPopupState.bind( null, false ) }\r\n                    resize={ false }\r\n                    placement={ placement }\r\n                    offset={ offset }\r\n                >\r\n                    <label className=\"advgb-advcalendar-popover-label\">\r\n                        { dateLabel }\r\n                        <Button\r\n        \t\t\t\t\ticon=\"no-alt\"\r\n                            className=\"advgb-advcalendar-remove-icon\"\r\n        \t\t\t\t\tonClick={ togglePopup }\r\n        \t\t\t\t/>\r\n                    </label>\r\n                    <DateTimePicker\r\n                        currentDate={ date }\r\n                        onChange={ onChangeDate }\r\n                        is12Hour={ true }\r\n                        isInvalidDate={ onInvalidDate }\r\n                    />\r\n                </Popover>\r\n            }\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nAdvDateTimeControl.defaultProps = {\r\n    placement: 'left',\r\n    offset: 40\r\n}\r\n\r\nexport function AdvDaysControl(props) {\r\n    const allDays = [\r\n        { slug: 0, label: _x( 'S', 'Sunday first letter', 'advanced-gutenberg' ) },\r\n        { slug: 1, label: __( 'M', 'advanced-gutenberg' ) },\r\n        { slug: 2, label: _x( 'T', 'Tuesday first letter', 'advanced-gutenberg' ) },\r\n        { slug: 3, label: __( 'W', 'advanced-gutenberg' ) },\r\n        { slug: 4, label: _x( 'T', 'Thursday first letter', 'advanced-gutenberg' ) },\r\n        { slug: 5, label: __( 'F', 'advanced-gutenberg' ) },\r\n        { slug: 6, label: _x( 'S', 'Saturday first letter', 'advanced-gutenberg' ) }\r\n    ];\r\n\r\n    const {\r\n        label,\r\n        days = [],\r\n        onChangeDays\r\n    } = props;\r\n\r\n    // Use a single state variable to store the selected days\r\n    const [selectedDays, setSelectedDays] = useState(Array.isArray(days) ? days : []);\r\n\r\n    /**\r\n    * Check if the day is selected or not\r\n    *\r\n    * @since 3.1.2\r\n    *\r\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\r\n    *\r\n    * @return {bool}\r\n    */\r\n    function isDaySelected( slug ) {\r\n        return selectedDays.some( el => el === slug );\r\n    }\r\n\r\n    /**\r\n    * Update the selected days state when a checkbox is changed\r\n    *\r\n    * @since 3.1.2\r\n    *\r\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\r\n    *\r\n    * @return {void}\r\n    */\r\n    function onChangeDay( slug ) {\r\n\r\n        // Check if the day is already selected\r\n        const isSelected = isDaySelected( slug );\r\n\r\n        // Create a new array with the updated selection\r\n        let updatedDays;\r\n        if ( isSelected ) {\r\n            // Remove the day from the selected days\r\n            updatedDays = selectedDays.filter( el => el !== slug );\r\n        } else {\r\n            // Add the day to the selected days\r\n            const findDay = allDays.find( el => el.slug === slug );\r\n            updatedDays = [ ...selectedDays, findDay.slug ];\r\n        }\r\n\r\n        // Remove duplicates\r\n        const uniqueDays = [ ...new Set( updatedDays ) ];\r\n\r\n        // Update the selected days state\r\n        setSelectedDays( uniqueDays );\r\n\r\n        // Call the onChangeDays prop to notify the parent component of the change\r\n        if ( onChangeDays ) {\r\n            onChangeDays( updatedDays );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"advgb-checkbox-wrapper\">\r\n                <label>\r\n                    { label }\r\n                </label>\r\n                <div className=\"advgb-checkbox-inline\">\r\n                    { allDays.map( day => (\r\n                        <CheckboxControl\r\n                            label={ day.label }\r\n                            checked={ isDaySelected( day.slug ) }\r\n                            onChange={ () => onChangeDay( day.slug ) }\r\n                        />\r\n                    ) ) }\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nclass AdvTimeClass extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            onChangeTime: null,\r\n            currentTime: this.props.currentTime || null,\r\n            hours: null,\r\n            minutes: null,\r\n            meridian: 'am',\r\n            onInit: true\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onChangeTime, currentTime, onInit } = this.state;\r\n\r\n        if( this.props.onChangeTime !== onChangeTime ) {\r\n            this.setState( {\r\n                onChangeTime: this.props.onChangeTime,\r\n            } );\r\n        }\r\n\r\n        if( this.props.currentTime !== currentTime ) {\r\n            this.setState( {\r\n                currentTime: this.props.currentTime,\r\n            } );\r\n        }\r\n\r\n        // Init\r\n        if( currentTime && currentTime.includes(':') && onInit ) {\r\n            this.setState( {\r\n                hours:      currentTime.split(':')[0],\r\n                minutes:    currentTime.split(':')[1],\r\n                meridian:   parseInt( currentTime.split(':')[0] ) > 11 ? 'pm' : 'am', // We set > 11 because PM starts from 12:00:00\r\n                onInit:     false\r\n            } );\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { onChangeTime, currentTime } = this.props;\r\n        const { hours, minutes, meridian } = this.state;\r\n        const { hours: prevHours, minutes: prevMinutes, meridian: prevMeridian } = prevState;\r\n\r\n        if( hours !== prevHours || minutes !== prevMinutes || meridian !== prevMeridian ) {\r\n\r\n            // When clearing time\r\n            if( ! hours && ! minutes ) {\r\n                return;\r\n            }\r\n\r\n            // Default minutes when hours selected\r\n            if( hours && ! minutes ) {\r\n                this.setState( {\r\n                    minutes: '00'\r\n                } );\r\n            }\r\n\r\n            // Default hours when minutes selected\r\n            if( minutes && ! hours ) {\r\n                this.setState( {\r\n                    hours: '01'\r\n                } );\r\n            }\r\n\r\n            /* Convert 12-hours to 24-hours.\r\n             * e.g. 12:00 AM becomes 00:00:00\r\n             *      12:00 PM becomes 12:00:00\r\n             *      01:00 PM becomes 13:00:00\r\n             */\r\n            const savedTime   = `${this.appendZero(\r\n                                    hourConvert.to24Hour( {\r\n                                        hour: parseInt( hours ),\r\n                                        meridiem: meridian\r\n                                    } )\r\n                                )}:${minutes}:00`;\r\n\r\n            // Value saved in source/attribute\r\n            this.props.onChangeTime( savedTime );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Append zero to one digit numbers. e.g. 9 becomes '09'\r\n     *\r\n     * @since 3.1.2\r\n     *\r\n     * @param {string value Hours or minutes\r\n     *\r\n     * @return {string}\r\n     */\r\n    appendZero( value ) {\r\n        if( isNaN( value ) ) {\r\n            return;\r\n        }\r\n\r\n        const res = parseInt( value );\r\n\r\n        return res > 9 ? res : `0${res}`;\r\n    }\r\n\r\n    render() {\r\n        const { onChangeTime, currentTime, hours, minutes, meridian } = this.state;\r\n\r\n        // Make sure hours are valid. 01: min, 12: max\r\n        const handleChangeHours = event => {\r\n            const value = Math.max( 1, Math.min( 12, Number( event.target.value ) ) );\r\n            this.setState( {\r\n                hours: this.appendZero( value )\r\n            } );\r\n        };\r\n\r\n        // Allow to use up/down keys for hours\r\n        const handleKeyDownHours = event => {\r\n            const value = Number( event.target.value );\r\n            if( event.key === 'ArrowUp' && value < 12 ) {\r\n                this.setState( {\r\n                    hours: this.appendZero( value + 1 )\r\n                } );\r\n            } else if ( event.key === 'ArrowDown' && value > 1 ) {\r\n                this.setState( {\r\n                    hours: this.appendZero( value - 1 )\r\n                } );\r\n            }\r\n        };\r\n\r\n        // Make sure minutes are valid. 01: min, 59: max\r\n        const handleChangeMinutes = event => {\r\n            const value = Math.max( 0, Math.min( 59, Number( event.target.value ) ) );\r\n            this.setState( {\r\n                minutes: this.appendZero( value )\r\n            } );\r\n        };\r\n\r\n        // Allow to use up/down keys for minutes\r\n        const handleKeyDownMinutes = event => {\r\n            const value = Number( event.target.value );\r\n            if( event.key === 'ArrowUp' && value < 59 ) {\r\n                this.setState( {\r\n                    minutes: this.appendZero( value + 1 )\r\n                } );\r\n            } else if ( event.key === 'ArrowDown' && value > 0 ) {\r\n                this.setState( {\r\n                    minutes: this.appendZero( value - 1 )\r\n                } );\r\n            }\r\n        };\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"advgb-advtime-control\">\r\n                    <label>\r\n                        { this.props.label }\r\n                    </label>\r\n                    <div className=\"advgb-advtime-hours-minutes\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={\r\n                                hours\r\n                                    ? this.appendZero(\r\n                                        hourConvert.to12Hour( parseInt( hours ) ).hour\r\n                                    ) : ''\r\n                            }\r\n                            onChange={ handleChangeHours }\r\n                            onKeyDown={ handleKeyDownHours }\r\n                            placeholder=\"--\"\r\n                        />\r\n                        <span>:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={\r\n                                minutes ? minutes : ''\r\n                            }\r\n                            onChange={ handleChangeMinutes }\r\n                            onKeyDown={ handleKeyDownMinutes }\r\n                            placeholder=\"--\"\r\n                        />\r\n                    </div>\r\n                    <ButtonGroup className=\"advgb-advtime-meridian\">\r\n                        <Button\r\n                            variant={\r\n                                meridian === null || meridian === 'am' ? 'primary' : 'secondary'\r\n                            }\r\n                            onClick={ () => {\r\n                                this.setState( {\r\n                                    meridian: 'am'\r\n                                } );\r\n                            } }\r\n                            disabled={ hours && minutes ? false : true }\r\n                        >\r\n                            { __( 'AM', 'advanced-gutenberg' ) }\r\n                        </Button>\r\n                        <Button\r\n                            variant={\r\n                                meridian === 'pm' ? 'primary' : 'secondary'\r\n                            }\r\n                            onClick={ () => {\r\n                                this.setState( {\r\n                                    meridian: 'pm'\r\n                                } );\r\n                            } }\r\n                            disabled={ hours && minutes ? false : true }\r\n                        >\r\n                            { __( 'PM', 'advanced-gutenberg' ) }\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                    { hours && minutes &&\r\n        \t\t\t\t<Button\r\n                            className=\"advgb-advtime-remove-icon\"\r\n        \t\t\t\t\ticon=\"no-alt\"\r\n                            onClick={\r\n                                () => {\r\n                                    this.props.onTimeClear();\r\n                                    this.setState( {\r\n                                        hours: null,\r\n                                        minutes: null,\r\n                                        meridian: 'am'\r\n                                    } );\r\n                                }\r\n                            }\r\n        \t\t\t\t/>\r\n        \t\t\t}\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default AdvTimeClass;\r\n\r\nexport function AdvTimeControl(props) {\r\n    const { label, currentTime, onChangeTime, onTimeClear } = props;\r\n\r\n    return(\r\n        <AdvTimeClass\r\n            label={ label }\r\n            currentTime={ currentTime }\r\n            onChangeTime={ onChangeTime }\r\n            onTimeClear={ onTimeClear }\r\n        />\r\n    );\r\n}\r\n\r\nexport function AdvTimezoneControl(props) {\r\n    const { label, defaultTimezone } = props;\r\n\r\n    return (\r\n        <Fragment>\r\n            { applyFilters( 'advgb.timezoneControl',\r\n                <Fragment>\r\n                    <div className=\"advgb-promo-overlay-area\">\r\n                        <div className=\"advgb-blur\">\r\n                            { label }\r\n                            <SelectControl\r\n                                value={ defaultTimezone }\r\n                                options={ [ {\r\n                                        label: defaultTimezone,\r\n                                        value: defaultTimezone\r\n                                    }\r\n                                ] }\r\n                                disabled={ true }\r\n                            />\r\n                        </div>\r\n                        <div class=\"advgb-pro-overlay-wrap\">\r\n                            <div class=\"advgb-pro-small-overlay-text advgb-tooltips ppb-tooltips-library click\" data-toggle=\"ppbtooltip\" data-placement=\"top\">\r\n                                <span class=\"advgb-promo-text\">\r\n                                    <span class=\"dashicons dashicons-lock\" style={{ color: 'initial' }}></span> {__('Pro feature', 'advanced-gutenberg')}\r\n                                </span>\r\n                                <span class=\"tooltip-text\">\r\n                                    <p>\r\n                                        {__('PublishPress Blocks Pro supports Timezone configuration.', 'advanced-gutenberg')}\r\n                                    </p>\r\n                                    <p>\r\n                                        <a class=\"clickable\" href=\"https://publishpress.com/links/blocks\" target=\"_blank\">\r\n                                            { __( 'Upgrade to Pro', 'advanced-gutenberg' ) }\r\n                                        </a>\r\n                                    </p>\r\n                                    <i></i>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <></>\r\n                </Fragment>,\r\n                props\r\n            ) }\r\n        </Fragment>\r\n    )\r\n}\r\n","/**\r\n * Generate option title suggestions\r\n *\r\n * @since 3.1.1\r\n * @param options Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\r\n *\r\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\r\n */\r\nexport const getOptionSuggestions = function( options ) {\r\n    return options.map( ( item ) => item.title );\r\n}\r\n\r\n/**\r\n * Match option slugs with its option titles\r\n * to display as field value (but NOT saved!).\r\n *\r\n * @since 3.1.1\r\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer'] or [82, 92]\r\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\r\n *\r\n * @return {array}  Option titles. e.g. ['Subscriber','New Customer']\r\n */\r\nexport const getOptionTitles = function( slugs, options ) {\r\n    let field_value = [];\r\n\r\n    if ( options !== null ) {\r\n        field_value = slugs.map( ( option_slug ) => {\r\n            let find_option = options.find( ( item ) => {\r\n                return item.slug === option_slug;\r\n            } );\r\n            if ( find_option === undefined || ! find_option ) {\r\n                return option_slug; // It should return false but creates empty selections\r\n            }\r\n            return find_option.title;\r\n        } );\r\n    }\r\n\r\n    return field_value;\r\n}\r\n\r\n/**\r\n * Match option titles with its slugs, and save slugs\r\n *\r\n * @since 3.1.1\r\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer']\r\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\r\n *\r\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\r\n */\r\nexport const getOptionSlugs = function( slugs, options ) {\r\n    let slugs_array = [];\r\n\r\n    slugs.map(\r\n        ( option_title ) => {\r\n            const matching_slug = options.find( ( item ) => {\r\n                return item.title === option_title;\r\n            } );\r\n            if ( matching_slug !== undefined ) {\r\n                slugs_array.push( matching_slug.slug );\r\n            }\r\n        }\r\n    )\r\n\r\n    return slugs_array;\r\n}\r\n","import classnames from 'classnames';\r\nimport { AdvDateTimeControl, AdvDaysControl, AdvTimeControl, AdvTimezoneControl } from \"../0-adv-components/datetime.jsx\";\r\nimport {\r\n    getOptionSuggestions,\r\n    getOptionTitles,\r\n    getOptionSlugs\r\n} from \"../0-adv-components/utils.jsx\";\r\n\r\n(function (wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement) {\r\n    wpBlockEditor = wp.blockEditor || wp.editor;\r\n    const { addFilter } = wpHooks;\r\n    const { sprintf, __ } = wpI18n;\r\n    const { hasBlockSupport } = wpBlocks;\r\n    const { InspectorControls, BlockControls } = wpBlockEditor;\r\n    const { DateTimePicker, ToggleControl, PanelBody, Notice, FormTokenField, SelectControl, TextControl, TextareaControl, RadioControl, Button, TabPanel, Modal } = wpComponents;\r\n\r\n    const { createHigherOrderComponent } = wpCompose;\r\n    const { Component, Fragment } = wpElement;\r\n\r\n    // do not show this feature if disabled.\r\n    if (!parseInt(advgbBlocks.block_controls)) return;\r\n\r\n    // Blocks that are not supported\r\n    let NON_SUPPORTED_BLOCKS = [\r\n        'core/freeform',\r\n        'core/legacy-widget',\r\n        'core/widget-area',\r\n        'core/column',\r\n        'advgb/tab',\r\n        'advgb/column'\r\n    ];\r\n\r\n    const getGlobalControls = function () {\r\n        return typeof advgb_block_controls_vars.controls !== 'undefined'\r\n            && Object.keys(advgb_block_controls_vars.controls).length > 0\r\n            ? advgb_block_controls_vars.controls\r\n            : [];\r\n    }\r\n\r\n    /**\r\n     * Check if schedule settings is legacy schedule\r\n     * @param {*} scheduleControl\r\n     * @returns\r\n     */\r\n    const isLegacyScheduleFormat = (scheduleControl) => {\r\n        return scheduleControl &&\r\n            (scheduleControl.hasOwnProperty('dateFrom') ||\r\n                scheduleControl.hasOwnProperty('dateTo') ||\r\n                scheduleControl.hasOwnProperty('days') ||\r\n                scheduleControl.hasOwnProperty('recurring'));\r\n    };\r\n\r\n    /**\r\n     * Check if a control is enabled\r\n     *\r\n     * @since 3.1.0\r\n     * @param {string} control  The use case block control. e.g. 'schedule'\r\n     *\r\n     * @return {bool}\r\n     */\r\n    const isControlEnabled = function (control) {\r\n        return typeof control !== 'undefined' && control;\r\n    }\r\n\r\n    /**\r\n     * Check if at least one control is enabled per block instance\r\n     *\r\n     * @since 3.1.1\r\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\r\n     *\r\n     * @return {bool}\r\n     */\r\n    const isAnyControlEnabledBlock = function (controlAttrs) {\r\n        const globalControls = getGlobalControls();\r\n        let counter = 0;\r\n        let blockControls = []; // Controls enabled in block instance\r\n\r\n        // Get enabled global controls (in Settings)\r\n        Object.keys(globalControls).forEach((item) => {\r\n            if (isControlEnabled(advgb_block_controls_vars.controls[item])) {\r\n                blockControls.push(item);\r\n            }\r\n        });\r\n\r\n        // Get counter for enabled controls in block instance\r\n        blockControls.forEach((item) => {\r\n            if (currentControlKey(controlAttrs, item, 'enabled')) {\r\n                counter++;\r\n            }\r\n        });\r\n\r\n        // Check for preset controls\r\n        if (currentControlKey(controlAttrs, 'presets', 'enabled') &&\r\n            currentControlKey(controlAttrs, 'presets', 'selected') &&\r\n            currentControlKey(controlAttrs, 'presets', 'selected').length > 0) {\r\n            counter++;\r\n        }\r\n\r\n        return counter > 0 ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Check if at least one control is enabled globally (in Settings)\r\n     *\r\n     * @since 3.1.0\r\n     *\r\n     * @return {bool}\r\n     */\r\n    const isAnyControlEnabledGlobal = function () {\r\n        const globalControls = getGlobalControls();\r\n        let counter = 0;\r\n\r\n        Object.keys(globalControls).map((item) => {\r\n            if (isControlEnabled(advgb_block_controls_vars.controls[item])) {\r\n                counter++;\r\n            }\r\n        });\r\n\r\n        return counter > 0 ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Return single controls array attribute value\r\n     *\r\n     * @since 3.1.0\r\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\r\n     * @param {string} control          The use case block control. e.g. 'schedule'\r\n     * @param {string} key              The control key to check. e.g. 'enabled'\r\n     *\r\n     * @return {mixed}\r\n     */\r\n    const currentControlKey = function (controlAttrs, control, key) {\r\n\r\n        // Check if advgbBlockControls attribute exists\r\n        const controlsAdded = typeof controlAttrs !== 'undefined' && controlAttrs.length\r\n            ? true\r\n            : false;\r\n\r\n        // Check if control exists in advgbBlockControls array\r\n        const controlExists = controlsAdded\r\n            && controlAttrs.some((element) => element.control === control)\r\n            ? true\r\n            : false;\r\n\r\n        if (controlExists) {\r\n            const itemIndex = controlAttrs.findIndex(element => element.control === control);\r\n            if (itemIndex < 0) {\r\n                return false;\r\n            }\r\n\r\n            let newArray = [...controlAttrs];\r\n            const obj = newArray[itemIndex];\r\n\r\n            // Special handling for schedule control because of legacy format\r\n            if (control === 'schedule') {\r\n                // Check for legacy format\r\n                if (isLegacyScheduleFormat(obj)) {\r\n                    if (key === 'schedules') {\r\n                        // Convert legacy to new format for the first time\r\n                        return [{\r\n                            dateFrom: obj.dateFrom || null,\r\n                            dateTo: obj.dateTo || null,\r\n                            recurring: obj.recurring || false,\r\n                            days: obj.days || [],\r\n                            timeFrom: obj.timeFrom || null,\r\n                            timeTo: obj.timeTo || null,\r\n                            timezone: obj.timezone || null\r\n                        }];\r\n                    } else if (key === 'enabled') {\r\n                        return obj.enabled || false;\r\n                    }\r\n                    return obj[key]; // Return legacy property\r\n                }\r\n                // New format handling\r\n                if (key === 'schedules') {\r\n                    return obj.schedules || [];\r\n                } else if (key === 'enabled') {\r\n                    return obj.enabled || false;\r\n                }\r\n\r\n                // For other keys, return from first schedule if exists\r\n                if (obj.schedules && obj.schedules.length > 0) {\r\n                    return obj.schedules[0][key];\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            return obj[key];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    const ScheduleControl = ({ index, schedule, onChange, onRemove, getTimezoneLabel, getTimezoneSlug, canRemove }) => {\r\n        return (\r\n            <div style={{\r\n                marginBottom: 5,\r\n                padding: 5,\r\n                border: '1px solid #ddd',\r\n                borderRadius: 4\r\n            }}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 16 }}>\r\n                    <h4>{sprintf(__('Schedule #%d', 'advanced-gutenberg'), index + 1)}</h4>\r\n                    {canRemove && (\r\n                        <Button\r\n                            isDestructive\r\n                            isLink\r\n                            onClick={onRemove}\r\n                        >\r\n                            {__('Remove', 'advanced-gutenberg')}\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n\r\n                <AdvDateTimeControl\r\n                    buttonLabel={__('Now', 'advanced-gutenberg')}\r\n                    dateLabel={__('Start showing', 'advanced-gutenberg')}\r\n                    date={schedule.dateFrom}\r\n                    onChangeDate={(newDate) => onChange('dateFrom', newDate)}\r\n                    onDateClear={() => onChange('dateFrom', null)}\r\n                    onInvalidDate={false}\r\n                />\r\n                <AdvDateTimeControl\r\n                    buttonLabel={__('Never', 'advanced-gutenberg')}\r\n                    dateLabel={__('Stop showing', 'advanced-gutenberg')}\r\n                    date={schedule.dateTo || null}\r\n                    onChangeDate={(newDate) => onChange('dateTo', newDate)}\r\n                    onDateClear={() => onChange('dateTo', null)}\r\n                    onInvalidDate={(date) => {\r\n                        if (schedule.dateFrom) {\r\n                            let thisDate = new Date(date.getTime());\r\n                            thisDate.setHours(0, 0, 0, 0);\r\n                            let fromDate = new Date(schedule.dateFrom);\r\n                            fromDate.setHours(0, 0, 0, 0);\r\n                            return thisDate.getTime() < fromDate.getTime();\r\n                        }\r\n                        return false;\r\n                    }}\r\n                />\r\n\r\n                {(schedule.dateFrom && schedule.dateTo) &&\r\n                    <ToggleControl\r\n                        label={__('Recurring', 'advanced-gutenberg')}\r\n                        checked={schedule.recurring || false}\r\n                        onChange={() => onChange('recurring', !schedule.recurring)}\r\n                        help={__('If Recurring is enabled, this block will be displayed every year between the selected dates.', 'advanced-gutenberg')}\r\n                    />\r\n                }\r\n\r\n                <AdvDaysControl\r\n                    label={__('On these days (optional)', 'advanced-gutenberg')}\r\n                    days={schedule.days || []}\r\n                    onChangeDays={(value) => onChange('days', value)}\r\n                />\r\n\r\n                <label style={{ marginBottom: 8, display: 'block' }}>\r\n                    {__('Between these times (optional)', 'advanced-gutenberg')}\r\n                </label>\r\n                <AdvTimeControl\r\n                    label={__('From', 'advanced-gutenberg')}\r\n                    currentTime={schedule.timeFrom || null}\r\n                    onChangeTime={(newTime) => onChange('timeFrom', newTime)}\r\n                    onTimeClear={() => onChange('timeFrom', null)}\r\n                />\r\n                <AdvTimeControl\r\n                    label={__('To', 'advanced-gutenberg')}\r\n                    currentTime={schedule.timeTo || null}\r\n                    onChangeTime={(newTime) => onChange('timeTo', newTime)}\r\n                    onTimeClear={() => onChange('timeTo', null)}\r\n                />\r\n\r\n                {(\r\n                    schedule.timeFrom\r\n                    && schedule.timeTo\r\n                    && (\r\n                        '01/01/2020T' + schedule.timeFrom >= '01/01/2020T' + schedule.timeTo\r\n                    )\r\n                ) &&\r\n                    <Notice\r\n                        className=\"advgb-notice-sidebar\"\r\n                        status=\"warning\"\r\n                        isDismissible={false}\r\n                    >\r\n                        {__('\"To\" time should be after \"From\" time!', 'advanced-gutenberg')}\r\n                    </Notice>\r\n                }\r\n\r\n                <AdvTimezoneControl\r\n                    label={__('Timezone', 'advanced-gutenberg')}\r\n                    defaultTimezone={getTimezoneLabel()}\r\n                    value={schedule.timezone || getTimezoneSlug()}\r\n                    onChangeTimezone={(value) => onChange('timezone', value)}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // Add non supported blocks according to Block controls\r\n    if (typeof advgb_block_controls_vars !== 'undefined'\r\n        && typeof advgb_block_controls_vars.non_supported !== 'undefined'\r\n        && advgb_block_controls_vars.non_supported.length > 0\r\n    ) {\r\n        // Merge dynamically disabled blocks\r\n        NON_SUPPORTED_BLOCKS = [...NON_SUPPORTED_BLOCKS, ...advgb_block_controls_vars.non_supported];\r\n        // Remove duplicated values\r\n        NON_SUPPORTED_BLOCKS = [...new Set(NON_SUPPORTED_BLOCKS)];\r\n    }\r\n\r\n    // Register block controls to blocks attributes\r\n    addFilter('blocks.registerBlockType', 'advgb/blockControls', function (settings) {\r\n        if (!NON_SUPPORTED_BLOCKS.includes(settings.name) && isAnyControlEnabledGlobal()) {\r\n            settings.attributes = Object.assign(settings.attributes, {\r\n                advgbBlockControls: {\r\n                    type: 'array',\r\n                    items: {\r\n                        type: 'object'\r\n                    },\r\n                    default: []\r\n                }\r\n            });\r\n        }\r\n\r\n        return settings;\r\n    });\r\n\r\n    const withEditControls = createHigherOrderComponent((BlockEdit) => {\r\n\r\n        return class BlockControlsEdit extends Component {\r\n\r\n            constructor(props) {\r\n                super(props);\r\n\r\n                this.state = {\r\n                    taxModOptions: [], // Store modified taxonomy options to decide if selected tax is for \"all terms\" or \"selected terms\"\r\n                    termOptions: [], // Store term options with slug (id) and title\r\n                    searchTermWord: '', // Updated when searching terms\r\n                    initArchive: true, // When true, trigger initArchiveControl()\r\n                    updateTaxLabels: false // When true, update taxonomy option labels\r\n                }\r\n\r\n                this.isPost = this.isPost.bind(this);\r\n            }\r\n\r\n            /**\r\n             * Get filtered term slugs based on selected taxonomies\r\n             *\r\n             * @since 3.1.1\r\n             * @param {array} taxonomies Array of taxonomies slugs\r\n             *\r\n             * @return {array}\r\n             */\r\n            getTermSlugs(taxonomies) {\r\n                const allTaxonomies = this.getTaxonomies();\r\n                let terms = [];\r\n\r\n                taxonomies.forEach((tax) => {\r\n                    const allTaxonomies = this.getTaxonomies();\r\n                    const itemIndex = allTaxonomies.findIndex((element) => element.slug === tax);\r\n\r\n                    allTaxonomies[itemIndex].terms.forEach((term) => {\r\n                        terms.push(term.slug);\r\n                    });\r\n                });\r\n\r\n                return terms;\r\n            }\r\n\r\n            /**\r\n             * Get taxonomies\r\n             *\r\n             * @since 3.1.1\r\n             *\r\n             * @return {array}\r\n             */\r\n            getTaxonomies() {\r\n                return typeof advgb_block_controls_vars.taxonomies !== 'undefined'\r\n                    && advgb_block_controls_vars.taxonomies.length > 0\r\n                    ? advgb_block_controls_vars.taxonomies\r\n                    : [];\r\n            }\r\n\r\n            /**\r\n             * Get all the available user roles from the site\r\n             *\r\n             * @since 3.1.0\r\n             *\r\n             * @return {array}\r\n             */\r\n            getUserRoles() {\r\n                return typeof advgb_block_controls_vars.user_roles !== 'undefined'\r\n                    && advgb_block_controls_vars.user_roles.length > 0\r\n                    ? advgb_block_controls_vars.user_roles\r\n                    : [];\r\n            }\r\n\r\n            /**\r\n             * Get filtered terms based on selected taxonomies\r\n             *\r\n             * @since 3.1.1\r\n             * @param {array} taxonomies Taxonomies slugs\r\n             *\r\n             * @return {array}\r\n             */\r\n            getTerms(taxonomies) {\r\n                const allTaxonomies = this.getTaxonomies();\r\n                let terms = [];\r\n\r\n                taxonomies.forEach((tax) => {\r\n                    const allTaxonomies = this.getTaxonomies();\r\n                    const itemIndex = allTaxonomies.findIndex((element) => element.slug === tax);\r\n\r\n                    allTaxonomies[itemIndex].terms.forEach((term) => {\r\n                        terms.push({\r\n                            slug: term.slug,\r\n                            title: `${term.title} (${allTaxonomies[itemIndex].title})`\r\n                        });\r\n                    });\r\n                });\r\n\r\n                return terms;\r\n            }\r\n\r\n            /**\r\n             * Get pages\r\n             *\r\n             * @since 3.1.1\r\n             *\r\n             * @return {array}\r\n             */\r\n            getPages() {\r\n                return typeof advgb_block_controls_vars.page !== 'undefined'\r\n                    && advgb_block_controls_vars.page.length > 0\r\n                    ? advgb_block_controls_vars.page\r\n                    : [];\r\n            }\r\n\r\n            getBrowserOptions() {\r\n                return [\r\n                    { slug: 'chrome', title: 'Chrome' },\r\n                    { slug: 'firefox', title: 'Firefox' },\r\n                    { slug: 'safari', title: 'Safari' },\r\n                    { slug: 'edge', title: 'Edge' },\r\n                    { slug: 'opera', title: 'Opera' },\r\n                    { slug: 'internet explorer', title: 'Internet Explorer' }\r\n                ];\r\n            }\r\n\r\n            getOperatingSystemOptions() {\r\n                return [\r\n                    { slug: 'windows', title: 'Windows' },\r\n                    { slug: 'mac', title: 'macOS' },\r\n                    { slug: 'linux', title: 'Linux' },\r\n                    { slug: 'android', title: 'Android' },\r\n                    { slug: 'ios', title: 'iOS' },\r\n                    { slug: 'chrome os', title: 'Chrome OS' }\r\n                ];\r\n            }\r\n\r\n            getConditionOptions() {\r\n                return [\r\n                    { label: '=', value: '=' },\r\n                    { label: '!=', value: '!=' },\r\n                    { label: '<', value: '<' },\r\n                    { label: '>', value: '>' },\r\n                    { label: '<=', value: '<=' },\r\n                    { label: '>=', value: '>=' },\r\n                    { label: 'contains', value: 'contains' },\r\n                    { label: 'begins with', value: 'beginsWith' },\r\n                    { label: 'ends with', value: 'endsWith' },\r\n                    { label: 'does not contain', value: 'doesNotContain' },\r\n                    { label: 'does not begin with', value: 'doesNotBeginWith' },\r\n                    { label: 'does not end with', value: 'doesNotEndWith' },\r\n                    { label: 'is null', value: 'null' },\r\n                    { label: 'is not null', value: 'notNull' },\r\n                    { label: 'in', value: 'in' },\r\n                    { label: 'not in', value: 'notIn' },\r\n                    { label: 'between', value: 'between' },\r\n                    { label: 'not between', value: 'notBetween' }\r\n                ];\r\n            }\r\n\r\n            getCapabilitiesOptions() {\r\n                const capabilities = typeof advgb_block_controls_vars.capabilities !== 'undefined'\r\n                    ? advgb_block_controls_vars.capabilities\r\n                    : [];\r\n\r\n                return capabilities.map(cap => ({\r\n                    slug: cap,\r\n                    title: cap.split('_').map(word =>\r\n                        word.charAt(0).toUpperCase() + word.slice(1)\r\n                    ).join(' ')\r\n                }));\r\n            }\r\n\r\n            /**\r\n             * Update advgbBlockControls attribute when a key value changes\r\n             *\r\n             * @since 2.14.0\r\n             * @param {string} control  The use case block control. e.g. 'schedule'\r\n             * @param {string} key      The control key to modify. e.g. 'enabled'\r\n             * @param {string} value    The control key value (not required for boolean keys)\r\n             *\r\n             * @return {void}\r\n             */\r\n            changeControlKey(control, key, value = '') {\r\n                const { attributes, setAttributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                // Control objects to add  when enabled for the first time\r\n                const scheduleControl = {\r\n                    control: 'schedule',\r\n                    enabled: true,\r\n                    schedules: [{\r\n                        dateFrom: null,\r\n                        dateTo: null,\r\n                        recurring: false,\r\n                        days: [],\r\n                        timeFrom: null,\r\n                        timeTo: null,\r\n                        timezone: this.getTimezoneSlug()\r\n                    }]\r\n                };\r\n                const userRoleControl = {\r\n                    control: 'user_role',\r\n                    enabled: true,\r\n                    roles: [],\r\n                    approach: 'public'\r\n                };\r\n                const archiveControl = {\r\n                    control: 'archive',\r\n                    enabled: true,\r\n                    taxonomies: [],\r\n                    approach: 'exclude'\r\n                };\r\n                const pageControl = {\r\n                    control: 'page',\r\n                    enabled: true,\r\n                    pages: [],\r\n                    approach: 'exclude'\r\n                };\r\n                const deviceTypeControl = {\r\n                    control: 'device_type',\r\n                    enabled: true,\r\n                    devices: []\r\n                };\r\n\r\n                const deviceWidthControl = {\r\n                    control: 'device_width',\r\n                    enabled: true,\r\n                    min_width: '',\r\n                    max_width: ''\r\n                };\r\n\r\n                const browserDeviceControl = {\r\n                    control: 'browser_device',\r\n                    enabled: true,\r\n                    browsers: [],\r\n                    approach: 'include'\r\n                };\r\n\r\n                const operatingSystemControl = {\r\n                    control: 'operating_system',\r\n                    enabled: true,\r\n                    systems: [],\r\n                    approach: 'include'\r\n                };\r\n\r\n                const cookieControl = {\r\n                    control: 'cookie',\r\n                    enabled: true,\r\n                    name: '',\r\n                    condition: '=',\r\n                    value: '',\r\n                    approach: 'include'\r\n                };\r\n\r\n                const userMetaControl = {\r\n                    control: 'user_meta',\r\n                    enabled: true,\r\n                    key: '',\r\n                    condition: '=',\r\n                    value: '',\r\n                    approach: 'include'\r\n                };\r\n\r\n                const postMetaControl = {\r\n                    control: 'post_meta',\r\n                    enabled: true,\r\n                    key: '',\r\n                    condition: '=',\r\n                    value: '',\r\n                    approach: 'include'\r\n                };\r\n\r\n                const queryStringControl = {\r\n                    control: 'query_string',\r\n                    enabled: true,\r\n                    queries: [],\r\n                    logic: 'all',\r\n                    approach: 'include'\r\n                };\r\n\r\n                const capabilitiesControl = {\r\n                    control: 'capabilities',\r\n                    enabled: true,\r\n                    capabilities: [],\r\n                    approach: 'include'\r\n                };\r\n\r\n                const presetsControl = {\r\n                    control: 'presets',\r\n                    enabled: true,\r\n                    selected: [],\r\n                    logic: 'any'\r\n                }\r\n\r\n                const metaControl = {\r\n                    control: 'meta',\r\n                    activeTab: 'custom'\r\n                }\r\n\r\n                // Check if advgbBlockControls attribute exists\r\n                const controlsAdded = typeof advgbBlockControls !== 'undefined' && advgbBlockControls.length\r\n                    ? true\r\n                    : false;\r\n                // Check if control exists in advgbBlockControls array\r\n                const controlExists = controlsAdded &&\r\n                    advgbBlockControls.some((element) => element.control === control)\r\n                    ? true\r\n                    : false;\r\n\r\n                if (controlExists) {\r\n                    const itemIndex = advgbBlockControls.findIndex(element => element.control === control);\r\n\r\n                    // No control found (this check seems not necessary but is here to prevent an unlikely error)\r\n                    if (itemIndex < 0) {\r\n                        return false;\r\n                    }\r\n\r\n                    let newArray = [...advgbBlockControls];\r\n                    const obj = newArray[itemIndex];\r\n\r\n                    // Special handling for schedule control because of legacy format\r\n                    if (control === 'schedule') {\r\n                        // Handle legacy format conversion\r\n                        if (isLegacyScheduleFormat(obj)) {\r\n                            // Convert to new format\r\n                            const legacySchedule = {\r\n                                dateFrom: obj.dateFrom || null,\r\n                                dateTo: obj.dateTo || null,\r\n                                recurring: obj.recurring || false,\r\n                                days: obj.days || [],\r\n                                timeFrom: obj.timeFrom || null,\r\n                                timeTo: obj.timeTo || null,\r\n                                timezone: obj.timezone || this.getTimezoneSlug()\r\n                            };\r\n\r\n                            newArray[itemIndex] = {\r\n                                control: 'schedule',\r\n                                enabled: obj.enabled,\r\n                                schedules: [legacySchedule]\r\n                            };\r\n\r\n                            // Now handle the key update\r\n                            if (key !== 'enabled' && key !== 'schedules') {\r\n                                newArray[itemIndex].schedules[0][key] = value;\r\n                            } else {\r\n                                newArray[itemIndex][key] = value;\r\n                            }\r\n\r\n                            setAttributes({ advgbBlockControls: newArray });\r\n                            return;\r\n                        }\r\n\r\n                        // Handle new format updates\r\n                        if (key === 'schedules') {\r\n                            newArray[itemIndex] = {\r\n                                ...newArray[itemIndex],\r\n                                schedules: value\r\n                            };\r\n                        } else if (key === 'enabled') {\r\n                            newArray[itemIndex] = {\r\n                                ...newArray[itemIndex],\r\n                                enabled: typeof value === 'boolean' ? value : !obj.enabled\r\n                            };\r\n                        } else {\r\n                            // Update specific property in first schedule\r\n                            const schedules = [...(obj.schedules || [])];\r\n                            if (schedules.length === 0) {\r\n                                schedules.push({\r\n                                    dateFrom: null,\r\n                                    dateTo: null,\r\n                                    recurring: false,\r\n                                    days: [],\r\n                                    timeFrom: null,\r\n                                    timeTo: null,\r\n                                    timezone: this.getTimezoneSlug()\r\n                                });\r\n                            }\r\n                            schedules[0][key] = value;\r\n                            newArray[itemIndex] = {\r\n                                ...newArray[itemIndex],\r\n                                schedules\r\n                            };\r\n                        }\r\n\r\n                        setAttributes({ advgbBlockControls: newArray });\r\n                    } else {\r\n                        newArray[itemIndex] = typeof obj[key] === 'boolean'\r\n                            ? { ...newArray[itemIndex], [key]: !obj[key] }\r\n                            : { ...newArray[itemIndex], [key]: value }\r\n                    }\r\n                    setAttributes({ advgbBlockControls: newArray });\r\n\r\n                } else if (controlsAdded && !controlExists) {\r\n\r\n                    // Add a new control object when other controls already exists\r\n                    const controlToAdd = {};\r\n                    switch (control) {\r\n                        case 'schedule':\r\n                            controlToAdd[control] = scheduleControl;\r\n                            break;\r\n\r\n                        case 'user_role':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    userRoleControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'archive':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    archiveControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'page':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    pageControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'device_type':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    deviceTypeControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'device_width':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    deviceWidthControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'browser_device':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    browserDeviceControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'operating_system':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    operatingSystemControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'cookie':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    cookieControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'user_meta':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    userMetaControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'post_meta':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    postMetaControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'query_string':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    queryStringControl\r\n                                ]\r\n                            });\r\n                            break;\r\n\r\n                        case 'capabilities':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    capabilitiesControl\r\n                                ]\r\n                            });\r\n                            break;\r\n                        case 'presets':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    presetsControl\r\n                                ]\r\n                            });\r\n                            break;\r\n                        case 'meta':\r\n                            setAttributes({\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    metaControl\r\n                                ]\r\n                            });\r\n                            break;\r\n                    }\r\n                    if (controlToAdd[control]) {\r\n                        setAttributes({\r\n                            advgbBlockControls: [\r\n                                ...advgbBlockControls,\r\n                                controlToAdd[control]\r\n                            ]\r\n                        });\r\n                    }\r\n                } else {\r\n                    // Add the first control object attribute\r\n                    const controlToAdd = {};\r\n                    switch (control) {\r\n                        case 'schedule':\r\n                            controlToAdd[control] = scheduleControl;\r\n                            break;\r\n\r\n                        case 'user_role':\r\n                            setAttributes({\r\n                                advgbBlockControls: [userRoleControl]\r\n                            });\r\n                            break;\r\n\r\n                        case 'archive':\r\n                            setAttributes({\r\n                                advgbBlockControls: [archiveControl]\r\n                            });\r\n                            break;\r\n\r\n                        case 'page':\r\n                            setAttributes({\r\n                                advgbBlockControls: [pageControl]\r\n                            });\r\n                            break;\r\n\r\n                        case 'device_type':\r\n                            setAttributes({\r\n                                advgbBlockControls: [deviceTypeControl]\r\n                            });\r\n                            break;\r\n\r\n                        case 'device_width':\r\n                            setAttributes({\r\n                                advgbBlockControls: [deviceWidthControl]\r\n                            });\r\n                            break;\r\n\r\n                        case 'browser_device':\r\n                            setAttributes({ advgbBlockControls: [browserDeviceControl] });\r\n                            break;\r\n\r\n                        case 'operating_system':\r\n                            setAttributes({ advgbBlockControls: [operatingSystemControl] });\r\n                            break;\r\n\r\n                        case 'cookie':\r\n                            setAttributes({ advgbBlockControls: [cookieControl] });\r\n                            break;\r\n\r\n                        case 'user_meta':\r\n                            setAttributes({ advgbBlockControls: [userMetaControl] });\r\n                            break;\r\n\r\n                        case 'post_meta':\r\n                            setAttributes({ advgbBlockControls: [postMetaControl] });\r\n                            break;\r\n\r\n                        case 'query_string':\r\n                            setAttributes({ advgbBlockControls: [queryStringControl] });\r\n                            break;\r\n\r\n                        case 'capabilities':\r\n                            setAttributes({ advgbBlockControls: [capabilitiesControl] });\r\n                            break;\r\n                        case 'presets':\r\n                            setAttributes({\r\n                                advgbBlockControls: [presetsControl]\r\n                            });\r\n                            break;\r\n                        case 'meta':\r\n                            setAttributes({\r\n                                advgbBlockControls: [metaControl]\r\n                            });\r\n                            break;\r\n                    }\r\n\r\n                    if (controlToAdd[control]) {\r\n                        setAttributes({ advgbBlockControls: [controlToAdd[control]] });\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Update archive control in advgbBlockControls attribute when taxonomies value changes\r\n             *\r\n             * @since 3.1.2\r\n             *\r\n             * @param {string} topic 'taxonomies' or 'terms'\r\n             * @param {string} slugs The taxonomy slugs or term ids to insert/modify. e.g. ['category','post_tag'] or [82,161,99] or ['all_<taxonomy_slug>']\r\n             *\r\n             * @return {void}\r\n             */\r\n            changeArchiveControl(topic, slugs) {\r\n                const { attributes, setAttributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                let taxArray = [];\r\n                const controlIndex = advgbBlockControls.findIndex(element => element.control === 'archive');\r\n\r\n                // No control found (this check seems not necessary but is here to prevent an unlikely error)\r\n                if (controlIndex < 0) {\r\n                    return false;\r\n                }\r\n\r\n                let newArray = [...advgbBlockControls];\r\n\r\n                if (topic === 'taxonomies') {\r\n\r\n                    // Check each taxonomy and its terms\r\n                    slugs.forEach((item) => {\r\n\r\n                        // Get terms from current taxonomy (item)\r\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === item);\r\n\r\n                        if (taxIndex === -1) {\r\n\r\n                            // The last selected taxonomy\r\n                            taxArray.push({\r\n                                tax: item,\r\n                                terms: [],\r\n                                all: true\r\n                            });\r\n\r\n                        } else {\r\n\r\n                            // Existing taxonomy\r\n                            const terms = newArray[controlIndex].taxonomies[taxIndex].terms.length\r\n                                ? newArray[controlIndex].taxonomies[taxIndex].terms\r\n                                : [];\r\n                            const approach = terms.length ? 'select' : 'all';\r\n\r\n                            taxArray.push({\r\n                                tax: item,\r\n                                terms: terms,\r\n                                all: terms.length ? false : true\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    newArray[controlIndex] = { ...newArray[controlIndex], ['taxonomies']: taxArray }\r\n\r\n                    setAttributes({\r\n                        advgbBlockControls: newArray\r\n                    });\r\n\r\n                } else if (topic === 'terms') {\r\n\r\n                    let terms = {};\r\n                    const taxonomies = this.currentArchiveControl('taxonomies');\r\n\r\n                    // Check each term id (item). slug means the id\r\n                    slugs.forEach((item) => {\r\n\r\n                        // Find the current term in termOptions state to use its tax later\r\n                        const option = this.state.termOptions.find(el => el.slug === item);\r\n\r\n                        if (terms[option.tax] === undefined) {\r\n                            terms[option.tax] = [];\r\n                        }\r\n\r\n                        // Get taxonomy from current term (item)\r\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === option.tax);\r\n\r\n                        /* Taxonomy for this term is selected? Is a bit reduntant but let's make sure\r\n                         * Then include the term.\r\n                         */\r\n                        if (taxonomies.includes(option.tax)) {\r\n                            terms[option.tax].push(item);\r\n                        }\r\n\r\n                    });\r\n\r\n                    // Update taxonomies with at least one term selected\r\n                    Object.keys(terms).forEach((tax) => {\r\n\r\n                        // Get taxonomy from current tax\r\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === tax);\r\n\r\n                        if (taxIndex >= 0) {\r\n                            newArray[controlIndex].taxonomies[taxIndex] = {\r\n                                tax: tax,\r\n                                terms: terms[tax],\r\n                                all: terms[tax].length ? false : true\r\n                            };\r\n                        }\r\n                    });\r\n\r\n                    // Include taxonomies with no terms selected (empty terms[option.tax] array)\r\n                    taxonomies.forEach((tax) => {\r\n                        if (!Object.keys(terms).includes(tax)) {\r\n\r\n                            // Get taxonomy from current tax\r\n                            const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === tax);\r\n\r\n                            if (taxIndex >= 0) {\r\n                                newArray[controlIndex].taxonomies[taxIndex] = {\r\n                                    tax: tax,\r\n                                    terms: [],\r\n                                    all: true\r\n                                };\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    setAttributes({\r\n                        advgbBlockControls: newArray\r\n                    });\r\n\r\n                } else {\r\n                    // Nothing to do here\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Return merged taxonomies or terms\r\n             *\r\n             * @since 3.1.2\r\n             *\r\n             * @param {string} topic 'taxonomies' or 'terms'\r\n             *\r\n             * @return {array} An single array with all the selected terms or taxonomies ['category','post_tag'] or [99,182,42]\r\n             */\r\n            currentArchiveControl(topic) {\r\n                const { attributes, setAttributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                let result = [];\r\n\r\n                /* Get all the taxonomy objects.\r\n                 * e.g.\r\n                 * [\r\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\r\n                 *     { \"tax\": \"category\", \"terms\": []}\r\n                 * ]\r\n                 */\r\n                const taxonomies = currentControlKey(advgbBlockControls, 'archive', 'taxonomies').length\r\n                    ? currentControlKey(advgbBlockControls, 'archive', 'taxonomies')\r\n                    : [];\r\n\r\n                if (topic === 'taxonomies') {\r\n\r\n                    taxonomies.forEach((item) => {\r\n                        result.push(item.tax);\r\n                    });\r\n\r\n                } else if (topic === 'terms') {\r\n\r\n                    taxonomies.forEach((item) => {\r\n                        item.terms.forEach((el) => {\r\n                            result.push(el); // term id\r\n                        });\r\n                    });\r\n\r\n                } else {\r\n                    // Nothing to do here\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            /**\r\n             * Execute when taxonomy selection changes\r\n             *\r\n             * @since 3.1.1\r\n             *\r\n             * @return {void}\r\n             */\r\n            taxonomiesChanged() {\r\n                const { attributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                const currentTerms = !!currentControlKey(advgbBlockControls, 'archive', 'terms')\r\n                    ? currentControlKey(advgbBlockControls, 'archive', 'terms')\r\n                    : [];\r\n                const taxonomies = !!currentControlKey(advgbBlockControls, 'archive', 'taxonomies')\r\n                    ? currentControlKey(advgbBlockControls, 'archive', 'taxonomies')\r\n                    : [];\r\n\r\n                if (currentTerms.length) {\r\n\r\n                    let result = [];\r\n                    currentTerms.forEach((slug) => {\r\n                        const itemIndex = this.state.termOptions.findIndex((item) => item.slug === slug);\r\n\r\n                        /* Get only the terms that belongs to selected taxonomies\r\n                         * and skip the ones that belongs to the deleted taxonomy\r\n                         */\r\n                        if (taxonomies.includes(this.state.termOptions[itemIndex].tax)) {\r\n                            result.push(this.state.termOptions[itemIndex].slug);\r\n                        }\r\n                    });\r\n\r\n                    this.changeControlKey(\r\n                        'archive',\r\n                        'terms',\r\n                        result\r\n                    );\r\n                }\r\n\r\n                /* Remove term options from non-selected taxonomies.\r\n                 * Case scenario: the terms from the last removed taxonomy.\r\n                 */\r\n                this.setState({\r\n                    termOptions: this.state.termOptions.filter((item) => {\r\n                        return this.currentArchiveControl('taxonomies').includes(item.tax);\r\n                    })\r\n                });\r\n\r\n                // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\r\n                this.modifyTaxLabels();\r\n            }\r\n\r\n            /**\r\n             * Get selected terms on first load\r\n             *\r\n             * @since 3.1.1\r\n             *\r\n             * @return {void}\r\n             */\r\n            initArchiveControl() {\r\n                const { advgbBlockControls } = this.props.attributes;\r\n\r\n                wp.apiFetch({\r\n                    path: wp.url.addQueryArgs(\r\n                        'advgb/v1/terms',\r\n                        {\r\n                            taxonomies: this.currentArchiveControl('taxonomies'),\r\n                            ids: this.currentArchiveControl('terms')\r\n                        }\r\n                    )\r\n                }).then((list) => {\r\n\r\n                    // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\r\n                    this.modifyTaxLabels();\r\n\r\n                    this.setState({\r\n                        termOptions: list,\r\n                        initArchive: false,\r\n                        updateTaxLabels: false\r\n                    });\r\n                });\r\n\r\n\r\n            }\r\n\r\n            /**\r\n             * Initial taxonomy labels to allow \"All <taxonomy> terms\" \"Selected <taxonomy> terms\" visual indicator\r\n             *\r\n             * @since 3.1.2\r\n             *\r\n             * @return {array}\r\n             */\r\n            iniTaxLabels() {\r\n\r\n                let result = [];\r\n                this.getTaxonomies().forEach((item) => {\r\n                    /* Item example\r\n                     *  {\r\n                     *      \"slug\": \"category\",\r\n                     *      \"title\": \"All Category terms\",\r\n                     *      \"singular\": \"Category\"\r\n                     *  }\r\n                     */\r\n                    result.push({\r\n                        slug: item.slug,\r\n                        title: sprintf(\r\n                            __('All %s terms', 'advanced-gutenberg'),\r\n                            item.title\r\n                        ),\r\n                        singular: item.title\r\n\r\n                    });\r\n                });\r\n\r\n                return result;\r\n            }\r\n\r\n            /**\r\n             * Modify taxonomy labels. Very similar to iniTaxLabels()\r\n             *\r\n             * @since 3.1.2\r\n             *\r\n             * @return {array}\r\n             */\r\n            modifyTaxLabels() {\r\n                const { advgbBlockControls } = this.props.attributes;\r\n\r\n                /* Get all selected taxonomy objects.\r\n                 * e.g.\r\n                 * [\r\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\r\n                 *     { \"tax\": \"category\", \"terms\": []}\r\n                 * ]\r\n                 */\r\n                const taxonomies = currentControlKey(advgbBlockControls, 'archive', 'taxonomies').length\r\n                    ? currentControlKey(advgbBlockControls, 'archive', 'taxonomies')\r\n                    : [];\r\n\r\n                // Copy whole state\r\n                let options = [...this.state.taxModOptions];\r\n\r\n                options.forEach((item, index) => {\r\n                    const tax = taxonomies.find(el => item.slug === el.tax);\r\n\r\n                    // Copy option to modify\r\n                    let option = { ...options[index] };\r\n                    // Update title value\r\n                    option.title = sprintf(\r\n                        tax === undefined || !tax.terms.length\r\n                            ? __('All %s terms', 'advanced-gutenberg')\r\n                            : __('Selected %s terms', 'advanced-gutenberg'),\r\n                        option.singular\r\n                    );\r\n                    // Add option back to the state\r\n                    options[index] = option;\r\n                });\r\n\r\n                // Save\r\n                this.setState({\r\n                    taxModOptions: options,\r\n                    updateTaxLabels: false\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Search terms based on search\r\n             *\r\n             * @since 3.1.1\r\n             *\r\n             * @return {void}\r\n             */\r\n            searchTerms() {\r\n                const { termOptions, searchTermWord } = this.state;\r\n                const { advgbBlockControls } = this.props.attributes;\r\n\r\n                wp.apiFetch({\r\n                    /*/ To get taxonomies\r\n                    path: wp.url.addQueryArgs( 'wp/v2/taxonomies', { context: 'edit' } )*/\r\n\r\n                    path: wp.url.addQueryArgs(\r\n                        'advgb/v1/terms',\r\n                        {\r\n                            search: searchTermWord,\r\n                            taxonomies: this.currentArchiveControl('taxonomies')\r\n                        }\r\n                    )\r\n\r\n                }).then((list) => {\r\n\r\n                    /*/ To get taxonomies\r\n                    Object.keys(list).forEach( (item) => {\r\n                        options.push( {\r\n                            label: list[item].name,\r\n                            value: list[item].slug\r\n                        } );\r\n                    });*/\r\n\r\n                    // Merge selected terms with results from fetch\r\n                    let options = [...termOptions, ...list];\r\n\r\n                    // Remove duplicated values\r\n                    options = Array.from(new Set(options.map(a => a.slug)))\r\n                        .map(slug => {\r\n                            return options.find(a => a.slug === slug)\r\n                        });\r\n\r\n                    this.setState({\r\n                        termOptions: options\r\n                    });\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Check if we're in post edit screen\r\n             *\r\n             * @since 3.1.2\r\n             *\r\n             * @return {bool}\r\n             */\r\n            isPost() {\r\n                const editorStore = wp.data.select('core/editor');\r\n                if (!editorStore) {\r\n                    return false;\r\n                }\r\n\r\n                const postId = editorStore.getCurrentPostId();\r\n\r\n                // In Site Editor, this returns a string like \"twentytwentyfive//home\"\r\n                // For real posts, it's a number\r\n                return !!postId && typeof postId === 'number';\r\n            }\r\n\r\n\r\n            /**\r\n             * Get the timezone label from site settings stored in advgbBlocks object\r\n             *\r\n             * @since 3.1.4\r\n             *\r\n             * @return {bool}\r\n             */\r\n            getTimezoneLabel() {\r\n                return typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\r\n                    ? advgbBlocks.timezone.replace(/_/g, ' ')\r\n                    : __('WordPress settings timezone', 'advanced-gutenberg')\r\n            }\r\n\r\n            /**\r\n             * Get the timezone slug from site settings stored in advgbBlocks object\r\n             *\r\n             * @since 3.1.4\r\n             *\r\n             * @return {bool}\r\n             */\r\n            getTimezoneSlug() {\r\n                return typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\r\n                    ? advgbBlocks.timezone\r\n                    : 'UTC'\r\n            }\r\n\r\n            renderTabContent(tabName) {\r\n                const { attributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                switch (tabName) {\r\n                    case 'custom':\r\n                        return this.renderCustomControls(advgbBlockControls);\r\n                    case 'presets':\r\n                        return this.renderPresetControls(advgbBlockControls);\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n\r\n            componentDidMount() {\r\n                this.setState({\r\n                    taxModOptions: this.iniTaxLabels()\r\n                });\r\n\r\n                // Subscribe to preset data changes\r\n                if (window.AdvGBPresetData) {\r\n                    this.presetDataSubscription = (updatedPresets) => {\r\n                        this.forceUpdate();\r\n                    };\r\n                    window.AdvGBPresetData.subscribe(this.presetDataSubscription);\r\n                }\r\n            }\r\n\r\n            componentWillUnmount() {\r\n                // Unsubscribe from preset data changes\r\n                if (window.AdvGBPresetData && this.presetDataSubscription) {\r\n                    window.AdvGBPresetData.unsubscribe(this.presetDataSubscription);\r\n                }\r\n            }\r\n\r\n            componentDidUpdate(prevProps, prevState) {\r\n                const { attributes, isSelected, name } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n                const { advgbBlockControls: prevBlockControls } = prevProps.attributes;\r\n                const { searchTermWord, initArchive } = this.state;\r\n                const { searchTermWord: prevTermWord } = prevState;\r\n\r\n                // Get human readable selected terms on block selection the first time\r\n                if (!this.isPost()\r\n                    && !NON_SUPPORTED_BLOCKS.includes(name)\r\n                    && isSelected\r\n                    && initArchive\r\n                    && isControlEnabled(advgb_block_controls_vars.controls.archive)\r\n                    && currentControlKey(advgbBlockControls, 'archive', 'enabled')\r\n                    && this.currentArchiveControl('taxonomies').length\r\n                    && this.currentArchiveControl('terms').length\r\n                ) {\r\n                    this.initArchiveControl();\r\n                }\r\n\r\n                // Search terms\r\n                if (searchTermWord !== prevTermWord && searchTermWord.length > 2) {\r\n                    this.searchTerms();\r\n                }\r\n\r\n                // Update available terms and remove terms which taxonomy has been removed\r\n                if (!this.isPost()\r\n                    && isControlEnabled(advgb_block_controls_vars.controls.archive)\r\n                    && currentControlKey(advgbBlockControls, 'archive', 'enabled')\r\n                    && (\r\n                        currentControlKey(prevBlockControls, 'archive', 'taxonomies') !== currentControlKey(advgbBlockControls, 'archive', 'taxonomies') // This trigger works when taxo changes, but not terms\r\n                        || this.state.updateTaxLabels // Trigger when terms changes\r\n                    )\r\n                ) {\r\n                    this.taxonomiesChanged();\r\n                }\r\n            }\r\n\r\n            renderCustomControls(advgbBlockControls) {\r\n                var query_string = currentControlKey(advgbBlockControls, 'query_string', 'queries');\r\n                const queriesValue = Array.isArray(query_string)\r\n                    ? query_string.join('\\n')\r\n                    : (query_string || '');\r\n\r\n                return (\r\n                    <Fragment>\r\n\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.schedule) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('Schedule', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'schedule', 'enabled')\r\n                                        ? __('Choose when to start showing and/or stop showing this block.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'schedule', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('schedule', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'schedule', 'enabled') && (\r\n                                    <Fragment>\r\n                                        {(currentControlKey(advgbBlockControls, 'schedule', 'schedules') || []).map((schedule, index) => (\r\n                                            <ScheduleControl\r\n                                                key={index}\r\n                                                index={index}\r\n                                                schedule={schedule}\r\n                                                onChange={(key, value) => {\r\n                                                    const schedules = [...(currentControlKey(advgbBlockControls, 'schedule', 'schedules') || [])];\r\n                                                    schedules[index][key] = value;\r\n                                                    this.changeControlKey('schedule', 'schedules', schedules);\r\n                                                }}\r\n                                                onRemove={() => {\r\n                                                    const schedules = [...(currentControlKey(advgbBlockControls, 'schedule', 'schedules') || [])];\r\n                                                    if (schedules.length > 1) {\r\n                                                        schedules.splice(index, 1);\r\n                                                        this.changeControlKey('schedule', 'schedules', schedules);\r\n                                                    }\r\n                                                }}\r\n                                                getTimezoneLabel={this.getTimezoneLabel}\r\n                                                getTimezoneSlug={this.getTimezoneSlug}\r\n                                                canRemove={(currentControlKey(advgbBlockControls, 'schedule', 'schedules') || []).length > 1}\r\n                                            />\r\n                                        ))}\r\n                                        <div style={{ marginBottom: 16 }}>\r\n                                            <Button\r\n                                                style={{ width: '100%', display: 'block' }}\r\n                                                isSecondary\r\n                                                onClick={() => {\r\n                                                    const currentSchedules = currentControlKey(advgbBlockControls, 'schedule', 'schedules') || [];\r\n                                                    const newSchedule = {\r\n                                                        dateFrom: null,\r\n                                                        dateTo: null,\r\n                                                        recurring: false,\r\n                                                        days: [],\r\n                                                        timeFrom: null,\r\n                                                        timeTo: null,\r\n                                                        timezone: this.getTimezoneSlug()\r\n                                                    };\r\n                                                    this.changeControlKey('schedule', 'schedules', [...currentSchedules, newSchedule]);\r\n                                                }}\r\n                                            >\r\n                                                {__('Add Another Schedule', 'advanced-gutenberg')}\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.user_role) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('User roles', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'user_role', 'enabled')\r\n                                        ? __('Choose which users can see this block.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'user_role', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('user_role', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'user_role', 'enabled') && (\r\n                                    <Fragment>\r\n                                        <div className=\"advgb-revert-mb\">\r\n                                            <SelectControl\r\n                                                value={\r\n                                                    currentControlKey(advgbBlockControls, 'user_role', 'approach')\r\n                                                }\r\n                                                options={[\r\n                                                    {\r\n                                                        value: 'public',\r\n                                                        label: __('Show to everyone', 'advanced-gutenberg')\r\n                                                    },\r\n                                                    {\r\n                                                        value: 'hidden',\r\n                                                        label: __('Hide from everyone', 'advanced-gutenberg')\r\n                                                    },\r\n                                                    {\r\n                                                        value: 'login',\r\n                                                        label: __('Show to logged in users', 'advanced-gutenberg')\r\n                                                    },\r\n                                                    {\r\n                                                        value: 'logout',\r\n                                                        label: __('Show to logged out users', 'advanced-gutenberg')\r\n                                                    },\r\n                                                    {\r\n                                                        value: 'include',\r\n                                                        label: __('Show to the selected user roles', 'advanced-gutenberg')\r\n                                                    },\r\n                                                    {\r\n                                                        value: 'exclude',\r\n                                                        label: __('Hide from the selected user roles', 'advanced-gutenberg')\r\n                                                    }\r\n                                                ]}\r\n                                                onChange={(value) => this.changeControlKey('user_role', 'approach', value)}\r\n                                            />\r\n                                        </div>\r\n                                        {(currentControlKey(advgbBlockControls, 'user_role', 'approach') === 'include' ||\r\n                                            currentControlKey(advgbBlockControls, 'user_role', 'approach') === 'exclude'\r\n                                        ) && (\r\n                                                <Fragment>\r\n                                                    <FormTokenField\r\n                                                        multiple\r\n                                                        label={__('Select user roles', 'advanced-gutenberg')}\r\n                                                        placeholder={__('Search', 'advanced-gutenberg')}\r\n                                                        suggestions={getOptionSuggestions(this.getUserRoles())}\r\n                                                        maxSuggestions={10}\r\n                                                        value={\r\n                                                            getOptionTitles(\r\n                                                                !!currentControlKey(advgbBlockControls, 'user_role', 'roles')\r\n                                                                    ? currentControlKey(advgbBlockControls, 'user_role', 'roles')\r\n                                                                    : [],\r\n                                                                this.getUserRoles()\r\n                                                            )\r\n                                                        }\r\n                                                        onChange={(value) => {\r\n                                                            this.changeControlKey('user_role', 'roles', getOptionSlugs(value, this.getUserRoles()))\r\n                                                        }}\r\n                                                        __experimentalExpandOnFocus\r\n                                                    />\r\n                                                    {(currentControlKey(advgbBlockControls, 'user_role', 'approach') === 'include' ||\r\n                                                        currentControlKey(advgbBlockControls, 'user_role', 'approach') === 'exclude'\r\n                                                    )\r\n                                                        && !currentControlKey(advgbBlockControls, 'user_role', 'roles').length && (\r\n                                                            <Notice\r\n                                                                className=\"advgb-notice-sidebar\"\r\n                                                                status=\"warning\"\r\n                                                                isDismissible={false}\r\n                                                                style={{ marginBottom: 30 }}\r\n                                                            >\r\n                                                                {\r\n                                                                    __(\r\n                                                                        'Please select at least one user role.',\r\n                                                                        'advanced-gutenberg'\r\n                                                                    )\r\n                                                                }\r\n                                                            </Notice>\r\n                                                        )}\r\n                                                </Fragment>\r\n                                            )}\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.device_width) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('Device Width', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'device_width', 'enabled')\r\n                                        ? __('Set minimum and maximum screen widths for this block to display.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'device_width', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('device_width', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'device_width', 'enabled') && (\r\n                                    <Fragment>\r\n                                        <TextControl\r\n                                            type=\"number\"\r\n                                            label={__('Minimum width (px)', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'device_width', 'min_width') || ''}\r\n                                            onChange={(value) => this.changeControlKey('device_width', 'min_width', value)}\r\n                                            placeholder={__('No minimum', 'advanced-gutenberg')}\r\n                                        />\r\n                                        <TextControl\r\n                                            type=\"number\"\r\n                                            label={__('Maximum width (px)', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'device_width', 'max_width') || ''}\r\n                                            onChange={(value) => this.changeControlKey('device_width', 'max_width', value)}\r\n                                            placeholder={__('No maximum', 'advanced-gutenberg')}\r\n                                        />\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.device_type) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('Device Type', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'device_type', 'enabled')\r\n                                        ? __('Choose which devices this block should be visible on.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'device_type', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('device_type', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'device_type', 'enabled') && (\r\n                                    <Fragment>\r\n                                        <div style={{ paddingLeft: '17%' }}>\r\n                                            <ToggleControl\r\n                                                label={__('Desktop', 'advanced-gutenberg')}\r\n                                                checked={currentControlKey(advgbBlockControls, 'device_type', 'devices').includes('desktop')}\r\n                                                onChange={() => {\r\n                                                    const devices = currentControlKey(advgbBlockControls, 'device_type', 'devices');\r\n                                                    const newDevices = devices.includes('desktop')\r\n                                                        ? devices.filter(d => d !== 'desktop')\r\n                                                        : [...devices, 'desktop'];\r\n                                                    this.changeControlKey('device_type', 'devices', newDevices);\r\n                                                }}\r\n                                            />\r\n                                            <ToggleControl\r\n                                                label={__('Tablet', 'advanced-gutenberg')}\r\n                                                checked={currentControlKey(advgbBlockControls, 'device_type', 'devices').includes('tablet')}\r\n                                                onChange={() => {\r\n                                                    const devices = currentControlKey(advgbBlockControls, 'device_type', 'devices');\r\n                                                    const newDevices = devices.includes('tablet')\r\n                                                        ? devices.filter(d => d !== 'tablet')\r\n                                                        : [...devices, 'tablet'];\r\n                                                    this.changeControlKey('device_type', 'devices', newDevices);\r\n                                                }}\r\n                                            />\r\n                                            <ToggleControl\r\n                                                label={__('Mobile', 'advanced-gutenberg')}\r\n                                                checked={currentControlKey(advgbBlockControls, 'device_type', 'devices').includes('mobile')}\r\n                                                onChange={() => {\r\n                                                    const devices = currentControlKey(advgbBlockControls, 'device_type', 'devices');\r\n                                                    const newDevices = devices.includes('mobile')\r\n                                                        ? devices.filter(d => d !== 'mobile')\r\n                                                        : [...devices, 'mobile'];\r\n                                                    this.changeControlKey('device_type', 'devices', newDevices);\r\n                                                }}\r\n                                            />\r\n                                            <ToggleControl\r\n                                                label={__('Bot', 'advanced-gutenberg')}\r\n                                                checked={currentControlKey(advgbBlockControls, 'device_type', 'devices').includes('robot')}\r\n                                                onChange={() => {\r\n                                                    const devices = currentControlKey(advgbBlockControls, 'device_type', 'devices');\r\n                                                    const newDevices = devices.includes('robot')\r\n                                                        ? devices.filter(d => d !== 'robot')\r\n                                                        : [...devices, 'robot'];\r\n                                                    this.changeControlKey('device_type', 'devices', newDevices);\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.browser_device) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('Browser', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'browser_device', 'enabled')\r\n                                        ? __('Choose which browsers can see this block.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'browser_device', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('browser_device', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'browser_device', 'enabled') && (\r\n                                    <Fragment>\r\n                                        <FormTokenField\r\n                                            multiple\r\n                                            label={__('Select Browsers', 'advanced-gutenberg')}\r\n                                            placeholder={__('Search browsers', 'advanced-gutenberg')}\r\n                                            suggestions={getOptionSuggestions(this.getBrowserOptions())}\r\n                                            maxSuggestions={10}\r\n                                            value={getOptionTitles(\r\n                                                currentControlKey(advgbBlockControls, 'browser_device', 'browsers') || [],\r\n                                                this.getBrowserOptions()\r\n                                            )}\r\n                                            onChange={(value) => {\r\n                                                this.changeControlKey('browser_device', 'browsers',\r\n                                                    getOptionSlugs(value, this.getBrowserOptions()))\r\n                                            }}\r\n                                            __experimentalExpandOnFocus\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Approach', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'browser_device', 'approach')}\r\n                                            options={[\r\n                                                { label: __('Show to selected browsers', 'advanced-gutenberg'), value: 'include' },\r\n                                                { label: __('Hide from selected browsers', 'advanced-gutenberg'), value: 'exclude' }\r\n                                            ]}\r\n                                            onChange={(value) => this.changeControlKey('browser_device', 'approach', value)}\r\n                                        />\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.operating_system) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('Operating System', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'operating_system', 'enabled')\r\n                                        ? __('Choose which operating systems can see this block.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'operating_system', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('operating_system', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'operating_system', 'enabled') && (\r\n                                    <Fragment>\r\n                                        <FormTokenField\r\n                                            multiple\r\n                                            label={__('Select Operating Systems', 'advanced-gutenberg')}\r\n                                            placeholder={__('Search operating systems', 'advanced-gutenberg')}\r\n                                            suggestions={getOptionSuggestions(this.getOperatingSystemOptions())}\r\n                                            maxSuggestions={10}\r\n                                            value={getOptionTitles(\r\n                                                currentControlKey(advgbBlockControls, 'operating_system', 'systems') || [],\r\n                                                this.getOperatingSystemOptions()\r\n                                            )}\r\n                                            onChange={(value) => {\r\n                                                this.changeControlKey('operating_system', 'systems',\r\n                                                    getOptionSlugs(value, this.getOperatingSystemOptions()))\r\n                                            }}\r\n                                            __experimentalExpandOnFocus\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Approach', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'operating_system', 'approach')}\r\n                                            options={[\r\n                                                { label: __('Show to selected OS', 'advanced-gutenberg'), value: 'include' },\r\n                                                { label: __('Hide from selected OS', 'advanced-gutenberg'), value: 'exclude' }\r\n                                            ]}\r\n                                            onChange={(value) => this.changeControlKey('operating_system', 'approach', value)}\r\n                                        />\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.cookie) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('Cookie', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'cookie', 'enabled')\r\n                                        ? __('Show or hide block based on cookie values.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'cookie', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('cookie', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'cookie', 'enabled') && (\r\n                                    <Fragment>\r\n                                        <TextControl\r\n                                            label={__('Cookie Name', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'cookie', 'name') || ''}\r\n                                            onChange={(value) => this.changeControlKey('cookie', 'name', value)}\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Condition', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'cookie', 'condition') || '='}\r\n                                            options={this.getConditionOptions()}\r\n                                            onChange={(value) => this.changeControlKey('cookie', 'condition', value)}\r\n                                        />\r\n                                        <TextControl\r\n                                            label={__('Value', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'cookie', 'value') || ''}\r\n                                            onChange={(value) => this.changeControlKey('cookie', 'value', value)}\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Approach', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'cookie', 'approach')}\r\n                                            options={[\r\n                                                { label: __('Show block when condition matches', 'advanced-gutenberg'), value: 'include' },\r\n                                                { label: __('Hide block when condition matches', 'advanced-gutenberg'), value: 'exclude' }\r\n                                            ]}\r\n                                            onChange={(value) => this.changeControlKey('cookie', 'approach', value)}\r\n                                        />\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.user_meta) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('User Meta', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'user_meta', 'enabled')\r\n                                        ? __('Show or hide block based on user meta values.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'user_meta', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('user_meta', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'user_meta', 'enabled') && (\r\n                                    <Fragment>\r\n                                        <TextControl\r\n                                            label={__('Meta Key', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'user_meta', 'key') || ''}\r\n                                            onChange={(value) => this.changeControlKey('user_meta', 'key', value)}\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Condition', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'user_meta', 'condition') || '='}\r\n                                            options={this.getConditionOptions()}\r\n                                            onChange={(value) => this.changeControlKey('user_meta', 'condition', value)}\r\n                                        />\r\n                                        <TextControl\r\n                                            label={__('Value', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'user_meta', 'value') || ''}\r\n                                            onChange={(value) => this.changeControlKey('user_meta', 'value', value)}\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Approach', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'user_meta', 'approach')}\r\n                                            options={[\r\n                                                { label: __('Show block when condition matches', 'advanced-gutenberg'), value: 'include' },\r\n                                                { label: __('Hide block when condition matches', 'advanced-gutenberg'), value: 'exclude' }\r\n                                            ]}\r\n                                            onChange={(value) => this.changeControlKey('user_meta', 'approach', value)}\r\n                                        />\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.post_meta) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('Post Meta', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'post_meta', 'enabled')\r\n                                        ? __('Show or hide block based on post meta values.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'post_meta', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('post_meta', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'post_meta', 'enabled') && (\r\n                                    <Fragment>\r\n                                        <TextControl\r\n                                            label={__('Meta Key', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'post_meta', 'key') || ''}\r\n                                            onChange={(value) => this.changeControlKey('post_meta', 'key', value)}\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Condition', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'post_meta', 'condition') || '='}\r\n                                            options={this.getConditionOptions()}\r\n                                            onChange={(value) => this.changeControlKey('post_meta', 'condition', value)}\r\n                                        />\r\n                                        <TextControl\r\n                                            label={__('Value', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'post_meta', 'value') || ''}\r\n                                            onChange={(value) => this.changeControlKey('post_meta', 'value', value)}\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Approach', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'post_meta', 'approach')}\r\n                                            options={[\r\n                                                { label: __('Show block when condition matches', 'advanced-gutenberg'), value: 'include' },\r\n                                                { label: __('Hide block when condition matches', 'advanced-gutenberg'), value: 'exclude' }\r\n                                            ]}\r\n                                            onChange={(value) => this.changeControlKey('post_meta', 'approach', value)}\r\n                                        />\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.query_string) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('Query String', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'query_string', 'enabled')\r\n                                        ? __('Show or hide block based on URL query parameters.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'query_string', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('query_string', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'query_string', 'enabled') && (\r\n                                    <Fragment>\r\n                                        <TextareaControl\r\n                                            label={__('Query Parameters', 'advanced-gutenberg')}\r\n                                            help={__('Enter query parameter names, one per line', 'advanced-gutenberg')}\r\n                                            value={queriesValue}\r\n                                            onChange={(value) => {\r\n                                                this.changeControlKey('query_string', 'queries', value);\r\n                                            }}\r\n                                            placeholder={__('utm_source\\nutm_medium\\nref', 'advanced-gutenberg')}\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Logic', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'query_string', 'logic') || 'all'}\r\n                                            options={[\r\n                                                { label: __('All parameters must be present', 'advanced-gutenberg'), value: 'all' },\r\n                                                { label: __('Any parameter must be present', 'advanced-gutenberg'), value: 'any' }\r\n                                            ]}\r\n                                            onChange={(value) => this.changeControlKey('query_string', 'logic', value)}\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Approach', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'query_string', 'approach')}\r\n                                            options={[\r\n                                                { label: __('Show block when condition matches', 'advanced-gutenberg'), value: 'include' },\r\n                                                { label: __('Hide block when condition matches', 'advanced-gutenberg'), value: 'exclude' }\r\n                                            ]}\r\n                                            onChange={(value) => this.changeControlKey('query_string', 'approach', value)}\r\n                                        />\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        {isControlEnabled(advgb_block_controls_vars.controls.capabilities) && (\r\n                            <Fragment>\r\n                                <ToggleControl\r\n                                    label={__('Capabilities', 'advanced-gutenberg')}\r\n                                    help={currentControlKey(advgbBlockControls, 'capabilities', 'enabled')\r\n                                        ? __('Show or hide block based on user capabilities.', 'advanced-gutenberg')\r\n                                        : ''\r\n                                    }\r\n                                    checked={currentControlKey(advgbBlockControls, 'capabilities', 'enabled')}\r\n                                    onChange={() => this.changeControlKey('capabilities', 'enabled')}\r\n                                />\r\n                                {currentControlKey(advgbBlockControls, 'capabilities', 'enabled') && (\r\n                                    <Fragment>\r\n                                        <FormTokenField\r\n                                            multiple\r\n                                            label={__('Select Capabilities', 'advanced-gutenberg')}\r\n                                            placeholder={__('Search capabilities', 'advanced-gutenberg')}\r\n                                            suggestions={getOptionSuggestions(this.getCapabilitiesOptions())}\r\n                                            maxSuggestions={10}\r\n                                            value={\r\n                                                getOptionTitles(\r\n                                                    currentControlKey(advgbBlockControls, 'capabilities', 'capabilities') || [],\r\n                                                    this.getCapabilitiesOptions()\r\n                                                )\r\n                                            }\r\n                                            onChange={(value) => {\r\n                                                this.changeControlKey('capabilities', 'capabilities', getOptionSlugs(value, this.getCapabilitiesOptions()))\r\n                                            }}\r\n                                            __experimentalExpandOnFocus\r\n                                        />\r\n                                        <SelectControl\r\n                                            label={__('Approach', 'advanced-gutenberg')}\r\n                                            value={currentControlKey(advgbBlockControls, 'capabilities', 'approach')}\r\n                                            options={[\r\n                                                { label: __('Show to users with selected capabilities', 'advanced-gutenberg'), value: 'include' },\r\n                                                { label: __('Hide from users with selected capabilities', 'advanced-gutenberg'), value: 'exclude' }\r\n                                            ]}\r\n                                            onChange={(value) => this.changeControlKey('capabilities', 'approach', value)}\r\n                                        />\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        {!this.isPost() && ( // Disabled in post edit\r\n                            <Fragment>\r\n                                {isControlEnabled(advgb_block_controls_vars.controls.archive) && (\r\n                                    <Fragment>\r\n                                        <ToggleControl\r\n                                            label={__('Term archives', 'advanced-gutenberg')}\r\n                                            help={currentControlKey(advgbBlockControls, 'archive', 'enabled')\r\n                                                ? __('Choose on which taxonomies and terms archive pages your blocks can be displayed.', 'advanced-gutenberg')\r\n                                                : ''\r\n                                            }\r\n                                            checked={currentControlKey(advgbBlockControls, 'archive', 'enabled')}\r\n                                            onChange={() => this.changeControlKey('archive', 'enabled')}\r\n                                        />\r\n                                        {currentControlKey(advgbBlockControls, 'archive', 'enabled') && (\r\n                                            <Fragment>\r\n                                                <div className=\"advgb-revert-mb--disabled\" style={{ marginBottom: 20 }}>\r\n                                                    <SelectControl\r\n                                                        value={\r\n                                                            currentControlKey(advgbBlockControls, 'archive', 'approach')\r\n                                                        }\r\n                                                        options={[\r\n                                                            {\r\n                                                                value: 'include',\r\n                                                                label: __('Show for selected terms', 'advanced-gutenberg')\r\n                                                            },\r\n                                                            {\r\n                                                                value: 'exclude',\r\n                                                                label: __('Hide for selected terms', 'advanced-gutenberg')\r\n                                                            }\r\n                                                        ]}\r\n                                                        onChange={(value) => this.changeControlKey('archive', 'approach', value)}\r\n                                                    />\r\n                                                </div>\r\n                                                <FormTokenField\r\n                                                    multiple\r\n                                                    label={__('Select taxonomies', 'advanced-gutenberg')}\r\n                                                    placeholder={__('Search taxonomies', 'advanced-gutenberg')}\r\n                                                    suggestions={getOptionSuggestions(this.state.taxModOptions || this.getTaxonomies())}\r\n                                                    maxSuggestions={10}\r\n                                                    value={\r\n                                                        getOptionTitles(\r\n                                                            this.currentArchiveControl('taxonomies'),\r\n                                                            this.state.taxModOptions || this.getTaxonomies()\r\n                                                        )\r\n                                                    }\r\n                                                    onChange={(value) => {\r\n                                                        this.changeArchiveControl(\r\n                                                            'taxonomies',\r\n                                                            getOptionSlugs(value, this.state.taxModOptions || this.getTaxonomies())\r\n                                                        );\r\n                                                    }}\r\n                                                    __experimentalExpandOnFocus\r\n                                                />\r\n                                                {(currentControlKey(advgbBlockControls, 'archive', 'taxonomies').length > 0) && (\r\n                                                    <Fragment>\r\n                                                        <FormTokenField\r\n                                                            multiple\r\n                                                            label={__('Filter terms', 'advanced-gutenberg')}\r\n                                                            placeholder={__('Search terms', 'advanced-gutenberg')}\r\n                                                            suggestions={getOptionSuggestions(\r\n                                                                this.state.termOptions\r\n                                                            )}\r\n                                                            maxSuggestions={10}\r\n                                                            value={\r\n                                                                getOptionTitles(\r\n                                                                    this.currentArchiveControl('terms'),\r\n                                                                    this.state.termOptions\r\n                                                                )\r\n                                                            }\r\n                                                            onChange={(value) => {\r\n                                                                this.changeArchiveControl(\r\n                                                                    'terms',\r\n                                                                    getOptionSlugs(\r\n                                                                        value,\r\n                                                                        this.state.termOptions\r\n                                                                    )\r\n                                                                );\r\n                                                                this.setState({\r\n                                                                    updateTaxLabels: true\r\n                                                                });\r\n                                                            }}\r\n                                                            onInputChange={(value) => {\r\n                                                                this.setState({\r\n                                                                    searchTermWord: value\r\n                                                                });\r\n                                                            }}\r\n                                                            __experimentalShowHowTo={false}\r\n                                                        />\r\n                                                        <div className=\"advgb-revert-mb--disabled components-form-token-field__help\"\r\n                                                            style={{ marginBottom: 20 }}>\r\n                                                            {__(\r\n                                                                'Use this filter to apply only to some terms.',\r\n                                                                'advanced-gutenberg'\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </Fragment>\r\n                                                )}\r\n                                            </Fragment>\r\n                                        )}\r\n                                    </Fragment>\r\n                                )}\r\n\r\n                                {isControlEnabled(advgb_block_controls_vars.controls.page) && (\r\n                                    <Fragment>\r\n                                        <ToggleControl\r\n                                            label={__('Pages', 'advanced-gutenberg')}\r\n                                            help={currentControlKey(advgbBlockControls, 'page', 'enabled')\r\n                                                ? __('Choose in which pages this block can be displayed.', 'advanced-gutenberg')\r\n                                                : ''\r\n                                            }\r\n                                            checked={currentControlKey(advgbBlockControls, 'page', 'enabled')}\r\n                                            onChange={() => this.changeControlKey('page', 'enabled')}\r\n                                        />\r\n                                        {currentControlKey(advgbBlockControls, 'page', 'enabled') && (\r\n                                            <Fragment>\r\n                                                <div className=\"advgb-revert-mb\">\r\n                                                    <SelectControl\r\n                                                        value={\r\n                                                            currentControlKey(advgbBlockControls, 'page', 'approach')\r\n                                                        }\r\n                                                        options={[\r\n                                                            {\r\n                                                                value: 'include',\r\n                                                                label: __('Show on the selected pages', 'advanced-gutenberg')\r\n                                                            },\r\n                                                            {\r\n                                                                value: 'exclude',\r\n                                                                label: __('Hide on the selected pages', 'advanced-gutenberg')\r\n                                                            }\r\n                                                        ]}\r\n                                                        onChange={(value) => this.changeControlKey('page', 'approach', value)}\r\n                                                    />\r\n                                                </div>\r\n                                                {(currentControlKey(advgbBlockControls, 'page', 'approach') === 'include' ||\r\n                                                    currentControlKey(advgbBlockControls, 'page', 'approach') === 'exclude'\r\n                                                ) && (\r\n                                                        <FormTokenField\r\n                                                            multiple\r\n                                                            label={__('Select pages', 'advanced-gutenberg')}\r\n                                                            placeholder={__('Search', 'advanced-gutenberg')}\r\n                                                            suggestions={getOptionSuggestions(this.getPages())}\r\n                                                            maxSuggestions={10}\r\n                                                            value={\r\n                                                                getOptionTitles(\r\n                                                                    !!currentControlKey(advgbBlockControls, 'page', 'pages')\r\n                                                                        ? currentControlKey(advgbBlockControls, 'page', 'pages')\r\n                                                                        : [],\r\n                                                                    this.getPages()\r\n                                                                )\r\n                                                            }\r\n                                                            onChange={(value) => {\r\n                                                                this.changeControlKey('page', 'pages', getOptionSlugs(value, this.getPages()))\r\n                                                            }}\r\n                                                            __experimentalExpandOnFocus\r\n                                                        />\r\n                                                    )}\r\n                                            </Fragment>\r\n                                        )}\r\n                                    </Fragment>\r\n                                )}\r\n                            </Fragment>\r\n                        )}\r\n                    </Fragment>\r\n                );\r\n            }\r\n\r\n            renderPresetControls(advgbBlockControls) {\r\n                return (\r\n                    <Fragment>\r\n                        <div className=\"advgb-preset-buttons\">\r\n                            <Button\r\n                                isPrimary\r\n                                onClick={() => {\r\n                                    this.setState({ showPresetModal: true, modalMode: 'create' });\r\n                                }}\r\n                            >\r\n                                {__('Manage Presets', 'advanced-gutenberg')}\r\n                            </Button>\r\n                        </div>\r\n                        <FormTokenField\r\n                            multiple\r\n                            label={__('Select Presets', 'advanced-gutenberg')}\r\n                            placeholder={__('Search presets', 'advanced-gutenberg')}\r\n                            suggestions={getOptionSuggestions(this.getPresetOptions())}\r\n                            maxSuggestions={10}\r\n                            value={getOptionTitles(\r\n                                currentControlKey(advgbBlockControls, 'presets', 'selected') || [],\r\n                                this.getPresetOptions()\r\n                            )}\r\n                            onChange={(value) => {\r\n                                this.changeControlKey('presets', 'selected', getOptionSlugs(value, this.getPresetOptions()));\r\n                                if (!this.props.attributes.advgbBlockControls.find(control => control.control === 'presets')) {\r\n                                    this.changeControlKey('presets', 'enabled', true);\r\n                                }\r\n                            }}\r\n                            __experimentalExpandOnFocus\r\n                        />\r\n\r\n                        <SelectControl\r\n                            label={__('Preset Logic', 'advanced-gutenberg')}\r\n                            value={currentControlKey(advgbBlockControls, 'presets', 'logic') || 'any'}\r\n                            options={[\r\n                                { label: __('Show if ANY preset matches', 'advanced-gutenberg'), value: 'any' },\r\n                                { label: __('Show if ALL presets match', 'advanced-gutenberg'), value: 'all' }\r\n                            ]}\r\n                            onChange={(value) => this.changeControlKey('presets', 'logic', value)}\r\n                        />\r\n\r\n                        {this.state.showPresetModal && this.renderPresetModal()}\r\n                    </Fragment>\r\n                );\r\n            }\r\n\r\n            renderPresetModal() {\r\n                return (\r\n                    <Modal\r\n                        title=\"\"\r\n                        onRequestClose={() => this.setState({ showPresetModal: false })}\r\n                        className=\"advgb-preset-modal\"\r\n                        isDismissible={true}\r\n                        isFullScreen={true}\r\n                        shouldCloseOnClickOutside={false}\r\n                        shouldCloseOnEsc={true}\r\n                    >\r\n                        {window.AdvGBPresetManager && wp.element.createElement(window.AdvGBPresetManager, { isModal: false })}\r\n                    </Modal>\r\n                );\r\n            }\r\n\r\n            getPresetOptions() {\r\n                const presets = window.AdvGBPresetData ? window.AdvGBPresetData.getAllPresets() : [];\r\n\r\n                return presets.map(preset => ({\r\n                    slug: preset.id,\r\n                    title: preset.title\r\n                }));\r\n            }\r\n\r\n            getActiveTab() {\r\n                const { attributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n                return currentControlKey(advgbBlockControls, 'meta', 'activeTab') || 'custom';\r\n            }\r\n\r\n            setActiveTab(tabName) {\r\n                this.changeControlKey('meta', 'activeTab', tabName);\r\n            }\r\n\r\n            render() {\r\n                const { attributes, setAttributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                return ([\r\n                    this.props.isSelected && (!NON_SUPPORTED_BLOCKS.includes(this.props.name))\r\n                    && isAnyControlEnabledGlobal() &&\r\n                    <InspectorControls key=\"advgb-bc-controls\">\r\n                        <PanelBody\r\n                            title={__('Block Controls', 'advanced-gutenberg')}\r\n                            icon=\"visibility\"\r\n                            initialOpen={false}\r\n                            className={\r\n                                isAnyControlEnabledBlock(advgbBlockControls)\r\n                                    ? 'advgb-feature-icon-active' : ''\r\n                            }\r\n                        >\r\n                            <TabPanel\r\n                                className=\"advgb-block-controls-tabs\"\r\n                                activeClass=\"active-tab\"\r\n                                initialTabName={this.getActiveTab()}\r\n                                onSelect={(tabName) => this.setActiveTab(tabName)}\r\n                                tabs={[\r\n                                    {\r\n                                        name: 'custom',\r\n                                        title: __('Custom Rules', 'advanced-gutenberg'),\r\n                                        className: 'tab-custom',\r\n                                    },\r\n                                    {\r\n                                        name: 'presets',\r\n                                        title: __('Presets', 'advanced-gutenberg'),\r\n                                        className: 'tab-presets',\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                {(tab) => this.renderTabContent(tab.name)}\r\n                            </TabPanel>\r\n                        </PanelBody>\r\n                    </InspectorControls>,\r\n                    <BlockEdit key=\"block-edit-advgb-dates\" {...this.props} />,\r\n                ])\r\n            }\r\n        }\r\n    }, 'withEditControls');\r\n\r\n    // Add option to add controls for supported blocks\r\n    addFilter('editor.BlockEdit', 'advgb/addBlockControls', withEditControls);\r\n\r\n    const withAttributes = createHigherOrderComponent((BlockListBlock) => {\r\n        return (props) => {\r\n            if ((!NON_SUPPORTED_BLOCKS.includes(props.name)) && hasBlockSupport(props.name, 'advgb/blockControls', true) && isAnyControlEnabledGlobal()) {\r\n                const { advgbBlockControls } = props.attributes;\r\n                const advgbBcClass = props.isSelected === false\r\n                    && isAnyControlEnabledBlock(advgbBlockControls)\r\n                    ? 'advgb-bc-editor-preview' : '';\r\n\r\n                return <BlockListBlock {...props} className={classnames(props.className, advgbBcClass)} advgbBlockControls={`${advgbBlockControls}`} />;\r\n            }\r\n\r\n            return <BlockListBlock {...props} />;\r\n        };\r\n    }, 'withAttributes');\r\n\r\n    // Apply attributes and CSS classes on backend\r\n    addFilter('editor.BlockListBlock', 'advgb/loadBackendBlockControls', withAttributes);\r\n\r\n})(wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element);"],"names":["module","exports","to12Hour","hour","meridiem","meridian","to24Hour","time","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","appendClass","parseValue","Array","isArray","apply","toString","Object","prototype","includes","key","call","value","newClass","default","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","obj","prop","_wp$components","wp","components","ButtonGroup","Button","DateTimePicker","CheckboxControl","TextControl","Popover","Tooltip","SelectControl","_wp$element","Icon","element","Component","Fragment","useState","_wp$i18n","i18n","__","_x","applyFilters","hooks","AdvDateTimeControl","props","_useState2","_slicedToArray","popupState","setPopupState","togglePopup","buttonLabel","dateLabel","date","onChangeDate","onDateClear","onInvalidDate","placement","offset","React","createElement","className","isLink","icon","onClick","text","moment","format","onClose","bind","resize","currentDate","onChange","is12Hour","isInvalidDate","AdvDaysControl","allDays","slug","label","_props$days","days","onChangeDays","_useState4","selectedDays","setSelectedDays","isDaySelected","some","el","map","day","checked","updatedDays","filter","findDay","find","concat","_toConsumableArray","uniqueDays","Set","onChangeDay","defaultProps","AdvTimeClass","_Component","_this","_classCallCheck","_callSuper","state","onChangeTime","currentTime","hours","minutes","onInit","_inherits","_this$state","this","setState","split","parseInt","prevProps","prevState","_this$props","_this$state2","prevHours","prevMinutes","prevMeridian","savedTime","appendZero","hourConvert","isNaN","res","_this2","_this$state3","type","event","Math","max","min","Number","target","onKeyDown","placeholder","variant","disabled","onTimeClear","AdvTimeControl","AdvTimezoneControl","defaultTimezone","options","class","style","color","href","getOptionSuggestions","item","title","getOptionTitles","slugs","field_value","option_slug","find_option","getOptionSlugs","slugs_array","option_title","matching_slug","push","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","blockEditor","editor","addFilter","sprintf","hasBlockSupport","_wpBlockEditor","InspectorControls","ToggleControl","BlockControls","PanelBody","Notice","FormTokenField","TextareaControl","RadioControl","TabPanel","Modal","createHigherOrderComponent","advgbBlocks","block_controls","NON_SUPPORTED_BLOCKS","getGlobalControls","advgb_block_controls_vars","controls","keys","isLegacyScheduleFormat","scheduleControl","isControlEnabled","control","isAnyControlEnabledBlock","controlAttrs","globalControls","counter","blockControls","forEach","currentControlKey","isAnyControlEnabledGlobal","itemIndex","findIndex","dateFrom","dateTo","recurring","timeFrom","timeTo","timezone","enabled","schedules","ScheduleControl","_ref","index","schedule","onRemove","getTimezoneLabel","getTimezoneSlug","canRemove","marginBottom","padding","border","borderRadius","display","justifyContent","isDestructive","newDate","thisDate","Date","getTime","setHours","fromDate","help","newTime","status","isDismissible","onChangeTimezone","non_supported","settings","name","attributes","_extends","advgbBlockControls","items","withEditControls","BlockEdit","BlockControlsEdit","taxModOptions","termOptions","searchTermWord","initArchive","updateTaxLabels","isPost","taxonomies","terms","getTaxonomies","tax","allTaxonomies","term","user_roles","_this3","page","capabilities","cap","word","charAt","toUpperCase","slice","join","setAttributes","userRoleControl","roles","approach","archiveControl","pageControl","pages","deviceTypeControl","devices","deviceWidthControl","min_width","max_width","browserDeviceControl","browsers","operatingSystemControl","systems","cookieControl","condition","userMetaControl","postMetaControl","queryStringControl","queries","logic","capabilitiesControl","presetsControl","selected","metaControl","activeTab","controlsAdded","controlExists","newArray","legacySchedule","_objectSpread","_defineProperty","controlToAdd","topic","_this4","_this$props2","taxArray","controlIndex","taxIndex","all","currentArchiveControl","option","_this$props3","result","_this5","currentTerms","changeControlKey","modifyTaxLabels","_this6","apiFetch","path","url","addQueryArgs","ids","then","list","singular","_this7","search","from","editorStore","data","select","postId","getCurrentPostId","replace","tabName","renderCustomControls","renderPresetControls","_this8","iniTaxLabels","window","AdvGBPresetData","presetDataSubscription","updatedPresets","forceUpdate","subscribe","unsubscribe","_this$props4","isSelected","prevBlockControls","prevTermWord","archive","initArchiveControl","searchTerms","taxonomiesChanged","_this9","query_string","queriesValue","splice","width","isSecondary","currentSchedules","newSchedule","user_role","multiple","suggestions","getUserRoles","maxSuggestions","__experimentalExpandOnFocus","device_width","device_type","paddingLeft","newDevices","browser_device","getBrowserOptions","operating_system","getOperatingSystemOptions","cookie","getConditionOptions","user_meta","post_meta","getCapabilitiesOptions","changeArchiveControl","onInputChange","__experimentalShowHowTo","getPages","_this10","isPrimary","showPresetModal","modalMode","getPresetOptions","renderPresetModal","_this11","onRequestClose","isFullScreen","shouldCloseOnClickOutside","shouldCloseOnEsc","AdvGBPresetManager","isModal","getAllPresets","preset","id","_this12","_this$props5","initialOpen","activeClass","initialTabName","getActiveTab","onSelect","setActiveTab","tabs","tab","renderTabContent","BlockListBlock","advgbBcClass","classnames","blocks","compose"],"sourceRoot":""}