{"version":3,"file":"block-usage.js","mappings":"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","sources":["webpack://advanced-gutenberg/./assets/blocks/block-usage/block-usage.jsx"],"sourcesContent":["(function (wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement) {\r\n    const { render, useState, useEffect, useRef, useMemo } = wpElement;\r\n    const { PanelBody, Button, Card, Spinner, Flex, FlexItem, ProgressBar, Notice, FormTokenField } = wpComponents;\r\n    const { __, sprintf } = wpI18n;\r\n\r\n    // IndexedDB setup\r\n    const DB_NAME = 'publishpress_blocks';\r\n    const STORE_NAME = 'block_usage_data';\r\n    const DB_VERSION = 1;\r\n    const EXCLUDED_BLOCKS = ['advgb/accordion'];\r\n\r\n    const openDatabase = () => {\r\n        return new Promise((resolve, reject) => {\r\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n            request.onerror = (event) => {\r\n                console.error('Database error:', event.target.error);\r\n                reject(event.target.error);\r\n            };\r\n\r\n            request.onsuccess = (event) => {\r\n                resolve(event.target.result);\r\n            };\r\n\r\n            request.onupgradeneeded = (event) => {\r\n                const db = event.target.result;\r\n                if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n                    db.createObjectStore(STORE_NAME, { keyPath: 'key' });\r\n                }\r\n            };\r\n        });\r\n    };\r\n\r\n    const getFromCache = async (key) => {\r\n        try {\r\n            const db = await openDatabase();\r\n            return new Promise((resolve, reject) => {\r\n                const transaction = db.transaction([STORE_NAME], 'readonly');\r\n                const store = transaction.objectStore(STORE_NAME);\r\n                const request = store.get(key);\r\n\r\n                request.onerror = () => reject('Error reading from cache');\r\n                request.onsuccess = () => resolve(request.result ? request.result.value : null);\r\n            });\r\n        } catch (error) {\r\n            console.error('Cache error:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const saveToCache = async (key, value) => {\r\n        try {\r\n            const db = await openDatabase();\r\n            return new Promise((resolve, reject) => {\r\n                const transaction = db.transaction([STORE_NAME], 'readwrite');\r\n                const store = transaction.objectStore(STORE_NAME);\r\n                const request = store.put({ key, value });\r\n\r\n                request.onerror = () => reject('Error saving to cache');\r\n                request.onsuccess = () => resolve();\r\n            });\r\n        } catch (error) {\r\n            console.error('Cache error:', error);\r\n        }\r\n    };\r\n\r\n    const clearCache = async () => {\r\n        try {\r\n            const db = await openDatabase();\r\n            return new Promise((resolve, reject) => {\r\n                const transaction = db.transaction([STORE_NAME], 'readwrite');\r\n                const store = transaction.objectStore(STORE_NAME);\r\n                const request = store.clear();\r\n\r\n                request.onerror = () => reject('Error clearing cache');\r\n                request.onsuccess = () => resolve();\r\n            });\r\n        } catch (error) {\r\n            console.error('Cache error:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const getBlocks = () => {\r\n        if (typeof wp.blocks === 'undefined') {\r\n            return { blocks: [], categories: [] };\r\n        }\r\n\r\n        // Register core blocks if available\r\n        if (wp.blockLibrary && typeof wp.blockLibrary.registerCoreBlocks === 'function') {\r\n            wp.blockLibrary.registerCoreBlocks();\r\n        }\r\n\r\n        let allBlocks = wp.blocks.getBlockTypes();\r\n        let allCategories = wp.blocks.getCategories();\r\n        let listBlocks = [];\r\n\r\n        // Get the category titles from localized data if available\r\n        const localizedCategories = (window.advgb_block_usage_data || {}).blockCategories || [];\r\n        const categoryTitleMap = localizedCategories.reduce((map, cat) => {\r\n            map[cat.slug] = cat.title;\r\n            return map;\r\n        }, {});\r\n\r\n        // Get blocks saved in advgb_block_usage_data.saved_blocks option\r\n        const { saved_blocks = [] } = window.advgb_block_usage_data || {};\r\n        if (saved_blocks.length > 0) {\r\n            const diff_blocks = saved_blocks.filter(\r\n                blocksA => !allBlocks.some(blocksB => blocksA.name === blocksB.name)\r\n            );\r\n            if (diff_blocks.length > 0) {\r\n                allBlocks = [...allBlocks, ...diff_blocks];\r\n            }\r\n        }\r\n\r\n        // Force activate blocks (like widget blocks)\r\n        const force_activate_blocks = [\r\n            {\r\n                'name': 'core/widget-group',\r\n                'icon': 'block-default',\r\n                'title': 'Widget Group',\r\n                'category': 'widgets'\r\n            },\r\n        ];\r\n        allBlocks = [...allBlocks, ...force_activate_blocks];\r\n\r\n        // Additional blocks to include\r\n        const include_blocks = [\r\n            {\r\n                'name': 'core/legacy-widget',\r\n                'icon': 'block-default',\r\n                'title': 'Legacy Widget',\r\n                'category': 'widgets'\r\n            }\r\n        ];\r\n        allBlocks = [...allBlocks, ...include_blocks];\r\n\r\n        // Process all blocks to standardize the format\r\n        allBlocks.forEach(function (block) {\r\n            // Skip excluded blocks\r\n            if (EXCLUDED_BLOCKS.includes(block.name)) {\r\n                return;\r\n            }\r\n            var blockItemIcon = '';\r\n            const blockItem = {\r\n                name: block.name,\r\n                icon: block.icon.src || block.icon,\r\n                title: block.title,\r\n                category: block.category || 'common',\r\n                parent: block.parent,\r\n                description: block.description || ''\r\n            };\r\n\r\n            // Use the localized category title if available\r\n            if (categoryTitleMap[blockItem.category]) {\r\n                blockItem.categoryTitle = categoryTitleMap[blockItem.category];\r\n            }\r\n\r\n            const savedIcon = !!block.icon.src ? block.icon.src : block.icon;\r\n\r\n            if (block.icon.foreground !== undefined) blockItem.iconColor = block.icon.foreground;\r\n\r\n            if (typeof savedIcon === 'function') {\r\n                if (typeof savedIcon.prototype !== 'undefined') {\r\n                    blockItem.icon = wp.element.renderToString(wp.element.createElement(savedIcon));\r\n                    blockItem.icon = blockItem.icon.replace(/stopcolor/g, 'stop-color');\r\n                    blockItem.icon = blockItem.icon.replace(/stopopacity/g, 'stop-opacity');\r\n                } else {\r\n                    blockItemIcon = wp.element.createElement(wp.components.Dashicon, { icon: 'block-default' });\r\n                    blockItem.icon = wp.element.renderToString(blockItemIcon);\r\n                }\r\n            } else if (typeof savedIcon === 'object') {\r\n                blockItem.icon = wp.element.renderToString(savedIcon);\r\n                blockItem.icon = blockItem.icon.replace(/stopcolor/g, 'stop-color');\r\n                blockItem.icon = blockItem.icon.replace(/stopopacity/g, 'stop-opacity');\r\n            } else if (\r\n                typeof savedIcon === 'string'\r\n                && !savedIcon.includes('<span') // Merged blocks icons from 'advgb_blocks_list' are stored as html\r\n                && !savedIcon.includes('<svg') // Merged blocks icons from 'advgb_blocks_list' are stored as html\r\n            ) {\r\n                blockItemIcon = wp.element.createElement(wp.components.Dashicon, { icon: savedIcon });\r\n                blockItem.icon = wp.element.renderToString(blockItemIcon);\r\n            } else {\r\n                blockItem.icon = savedIcon; // Pure html for merged blocks icons from 'advgb_blocks_list'\r\n            }\r\n\r\n            listBlocks.push(blockItem);\r\n        });\r\n\r\n        // Remove duplicated blocks by block name\r\n        const uniqueNames = [];\r\n        let i = listBlocks.length;\r\n        while (i--) {\r\n            const name = listBlocks[i].name;\r\n            if (uniqueNames.includes(name)) {\r\n                listBlocks.splice(i, 1);\r\n            } else {\r\n                uniqueNames.push(name);\r\n            }\r\n        }\r\n\r\n        // Sort categories to show \"advgb-category\" first\r\n        allCategories.sort((a, b) => {\r\n            if (a.slug === 'advgb-category') return -1;\r\n            if (b.slug === 'advgb-category') return 1;\r\n            return 0;\r\n        });\r\n\r\n        // Add any missing categories from localized data\r\n        localizedCategories.forEach(localizedCat => {\r\n            if (!allCategories.some(cat => cat.slug === localizedCat.slug)) {\r\n                allCategories.push({\r\n                    slug: localizedCat.slug,\r\n                    title: localizedCat.title\r\n                });\r\n            }\r\n        });\r\n\r\n        return {\r\n            blocks: listBlocks,\r\n            categories: allCategories\r\n        };\r\n    };\r\n\r\n    const Sidebar = React.memo(({ selected, data, onClose, canEditPosts }) => {\r\n        const [expandedPost, setExpandedPost] = useState(null);\r\n        const { usage = {}, posts = [] } = data;\r\n\r\n        const blockData = usage[selected?.name] || { posts: {}, total: 0 };\r\n        const postIds = Object.keys(blockData.posts);\r\n\r\n        // Get posts that contain this block\r\n        const blockPosts = useMemo(() => {\r\n            return posts.filter(post => postIds.includes(post.post_id.toString()));\r\n        }, [posts, postIds]);\r\n\r\n        // Group posts by title (for multiple instances in same post)\r\n        const groupedPosts = useMemo(() => {\r\n            const groups = {};\r\n\r\n            blockPosts.forEach(post => {\r\n                const count = blockData.posts[post.post_id]?.count || 0;\r\n                const scanned = blockData.posts[post.post_id]?.scanned || '';\r\n\r\n                const key = `${post.post_title}-${post.post_id}`;\r\n\r\n                if (!groups[key]) {\r\n                    groups[key] = {\r\n                        ...post,\r\n                        totalCount: 0,\r\n                        scanned\r\n                    };\r\n                }\r\n\r\n                groups[key].totalCount += count;\r\n            });\r\n\r\n            return Object.values(groups);\r\n        }, [blockPosts, blockData]);\r\n\r\n        const groupBlocksByName = (blocks) => {\r\n            const grouped = {};\r\n\r\n            blocks.forEach(block => {\r\n                if (!block.name) return;\r\n\r\n                const key = block.name;\r\n                if (!grouped[key]) {\r\n                    grouped[key] = {\r\n                        ...block,\r\n                        count: 0,\r\n                        innerBlocks: []\r\n                    };\r\n                }\r\n                grouped[key].count += 1;\r\n\r\n                if (block.innerBlocks && block.innerBlocks.length > 0) {\r\n                    grouped[key].innerBlocks.push(...block.innerBlocks);\r\n                }\r\n            });\r\n\r\n            return Object.values(grouped);\r\n        };\r\n\r\n        const renderBlockItem = (block, depth = 0) => {\r\n            if (!block.name) return null;\r\n\r\n            const groupedInnerBlocks = block.innerBlocks && block.innerBlocks.length > 0\r\n                ? groupBlocksByName(block.innerBlocks)\r\n                : [];\r\n\r\n            return (\r\n                <div\r\n                    key={block.clientId || `${block.name}-${depth}-${Math.random().toString(36).substr(2, 9)}`}\r\n                    className=\"pp-blocks-usage-post-block-item\"\r\n                    style={{ marginLeft: `${depth * 15}px` }}\r\n                >\r\n                    <div className=\"pp-blocks-usage-block-name\">\r\n                        {block.icon && (\r\n                            <span className=\"block-icon\" style={block.iconColor ? { color: block.iconColor } : {}}>\r\n                                {typeof block.icon === 'string' && !block.icon.includes('<') ? (\r\n                                    <span className={`dashicons dashicons-${block.icon}`}></span>\r\n                                ) : (\r\n                                    <span dangerouslySetInnerHTML={{ __html: block.icon }} />\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                        {block.name}\r\n                        {block.count > 1 && (\r\n                            <span className=\"pp-blocks-usage-block-count\">×{block.count}</span>\r\n                        )}\r\n                    </div>\r\n                    {groupedInnerBlocks.map(innerBlock => renderBlockItem(innerBlock, depth + 1))}\r\n                </div>\r\n            );\r\n        };\r\n\r\n        return (\r\n            <div className=\"pp-blocks-usage-sidebar\" ref={useRef(null)}>\r\n                <div className=\"pp-blocks-usage-sidebar-header\">\r\n                    <h2>\r\n                        <div className=\"pp-blocks-usage-tile-main\">\r\n                            <span>{selected.title}</span>\r\n                        </div>\r\n                        <span className=\"pp-blocks-usage-panel-subtitle\">\r\n                            {groupedPosts.length} {__('locations', 'advanced-gutenberg')} | {blockData.total} {__('instances', 'advanced-gutenberg')}\r\n                        </span>\r\n                    </h2>\r\n                </div>\r\n                <div className=\"pp-blocks-usage-sidebar-content\">\r\n                    <div className=\"pp-blocks-usage-block-meta\">\r\n                        <p><strong>{__('Name:', 'advanced-gutenberg')}</strong> {selected.title}</p>\r\n                        <p><strong>{__('Description:', 'advanced-gutenberg')}</strong> {selected.description}</p>\r\n                        <p><strong>{__('Category:', 'advanced-gutenberg')}</strong> {selected.category}</p>\r\n                    </div>\r\n\r\n                    {groupedPosts.length > 0 ? (\r\n                        <>\r\n                            <div className=\"pp-blocks-usage-usage-stats\">\r\n                                <span><strong>{__('Locations:', 'advanced-gutenberg')}</strong> {groupedPosts.length}</span>\r\n                                <span><strong>{__('Total instances:', 'advanced-gutenberg')}</strong> {blockData.total}</span>\r\n                            </div>\r\n\r\n                            <div className=\"pp-blocks-usage-post-list\">\r\n                                {groupedPosts.map((post) => {\r\n                                    const isExpanded = expandedPost === post.post_id;\r\n                                    const postTypeLabel = post.post_type;\r\n\r\n                                    return (\r\n                                        <div key={post.post_id} className={`pp-blocks-usage-post-item ${isExpanded ? 'expanded' : ''}`}>\r\n                                            <div\r\n                                                className=\"pp-blocks-usage-post-header\"\r\n                                                onClick={() => setExpandedPost(isExpanded ? null : post.post_id)}\r\n                                            >\r\n                                                <div className=\"pp-blocks-usage-post-title\">\r\n                                                    {post.post_title}\r\n                                                </div>\r\n                                                <div className=\"pp-blocks-usage-post-meta\">\r\n                                                    <span className=\"pp-blocks-usage-post-type\">\r\n                                                        {postTypeLabel}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <Button\r\n                                                    size=\"small\"\r\n                                                    icon={isExpanded ? 'arrow-up-alt2' : 'arrow-down-alt2'}\r\n                                                    className=\"pp-blocks-usage-expand-button\"\r\n                                                />\r\n                                            </div>\r\n\r\n                                            {isExpanded && (\r\n                                                <div className=\"pp-blocks-usage-post-content\">\r\n                                                    <div className=\"pp-blocks-usage-post-actions\">\r\n                                                        {post.edit_link && canEditPosts && (\r\n                                                            <Button\r\n                                                                variant=\"secondary\"\r\n                                                                isSmall\r\n                                                                href={post.edit_link}\r\n                                                                target=\"_blank\"\r\n                                                            >\r\n                                                                {__('Edit Post', 'advanced-gutenberg')}\r\n                                                            </Button>\r\n                                                        )}\r\n                                                        <Button\r\n                                                            variant=\"secondary\"\r\n                                                            size=\"small\"\r\n                                                            href={post.view_link}\r\n                                                            target=\"_blank\"\r\n                                                        >\r\n                                                            {__('View Post', 'advanced-gutenberg')}\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                    <div className=\"pp-blocks-usage-post-blocks\">\r\n                                                        <h4>{__('Blocks in this post:', 'advanced-gutenberg')}</h4>\r\n                                                        {post.blocks?.length > 0 ? (\r\n                                                            groupBlocksByName(post.blocks).map(block => renderBlockItem(block))\r\n                                                        ) : (\r\n                                                            <p>{__('No blocks found in this post.', 'advanced-gutenberg')}</p>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <div className=\"pp-blocks-usage-no-results\">\r\n                            {data.lastScanDate ? (\r\n                                <>\r\n                                    <p><em>{__('This block was not found in any posts.', 'advanced-gutenberg')}</em></p>\r\n                                    <p>{__('Last scan:', 'advanced-gutenberg')} {new Date(data.lastScanDate).toLocaleString()}</p>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <p><em>{__('No scan history available for this block.', 'advanced-gutenberg')}</em></p>\r\n                                    <p>{__('Click the Scan button to check for usage.', 'advanced-gutenberg')}</p>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    const App = () => {\r\n        const {\r\n            ajaxUrl = '',\r\n            nonce = '',\r\n            initialData,\r\n            currentUser\r\n        } = window.advgb_block_usage_data || {};\r\n\r\n        const [blocksData, setBlocksData] = useState(() => getBlocks());\r\n        const [data, setData] = useState(initialData);\r\n        const [loadingAll, setLoadingAll] = useState(false);\r\n        const [loadingClearAll, setLoadingClearAll] = useState(false);\r\n        const [selected, setSelected] = useState(null);\r\n        const [showEmptyBlocks, setShowEmptyBlocks] = useState(false);\r\n        const [selectedPostTypes, setSelectedPostTypes] = useState(['post', 'page']);\r\n        const [scanProgress, setScanProgress] = useState({\r\n            current: 0,\r\n            total: 0,\r\n            status: '',\r\n            completed: false\r\n        });\r\n        const [dbError, setDbError] = useState(null);\r\n        const [initialLoadComplete, setInitialLoadComplete] = useState(false);\r\n\r\n        // Load data from IndexedDB on initial render\r\n        useEffect(() => {\r\n            const loadData = async () => {\r\n                try {\r\n                    const cachedData = await getFromCache('block_usage_data');\r\n                    const cachedSettings = await getFromCache('block_usage_settings');\r\n\r\n                    if (cachedData) {\r\n                        setData(cachedData);\r\n                    }\r\n\r\n                    if (cachedSettings) {\r\n                        setShowEmptyBlocks(cachedSettings.showEmptyBlocks !== false);\r\n\r\n                        if (cachedSettings.lastSelectedBlock) {\r\n                            const lastSelected = blocksData.blocks.find(b => b.name === cachedSettings.lastSelectedBlock);\r\n                            if (lastSelected) {\r\n                                setSelected(lastSelected);\r\n                            }\r\n                        }\r\n\r\n                        if (cachedSettings.selectedPostTypes) {\r\n                            setSelectedPostTypes(cachedSettings.selectedPostTypes);\r\n                        }\r\n                    }\r\n                    setInitialLoadComplete(true);\r\n                } catch (error) {\r\n                    console.error('Failed to load data from IndexedDB:', error);\r\n                    setDbError(__('Failed to load data from local storage. Please refresh the page.', 'advanced-gutenberg'));\r\n                    setInitialLoadComplete(true);\r\n                }\r\n            };\r\n\r\n            loadData();\r\n        }, [blocksData.blocks]);\r\n\r\n        const postAjax = (action, data = {}) => {\r\n            const body = new URLSearchParams({ action, nonce, ...data });\r\n            return fetch(ajaxUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n                body,\r\n            }).then(r => r.json());\r\n        };\r\n\r\n        const handleToggleChange = async (value) => {\r\n            setShowEmptyBlocks(value);\r\n            try {\r\n                await saveToCache('block_usage_settings', {\r\n                    showEmptyBlocks: value,\r\n                    lastSelectedBlock: selected?.name || '',\r\n                    selectedPostTypes: selectedPostTypes\r\n                });\r\n            } catch (error) {\r\n                console.error('Failed to save showEmptyBlocks setting:', error);\r\n            }\r\n        };\r\n\r\n        const handlePostTypeChange = async (newPostTypes) => {\r\n            setSelectedPostTypes(newPostTypes);\r\n            try {\r\n                await saveToCache('block_usage_settings', {\r\n                    showEmptyBlocks,\r\n                    lastSelectedBlock: selected?.name || '',\r\n                    selectedPostTypes: newPostTypes\r\n                });\r\n            } catch (error) {\r\n                console.error('Failed to save post types:', error);\r\n            }\r\n        };\r\n\r\n        const categories = useMemo(() => {\r\n            const cats = {};\r\n\r\n            // First create the advgb-category if it exists\r\n            const advgbCategory = blocksData.categories.find(cat => cat.slug === 'advgb-category');\r\n            if (advgbCategory) {\r\n                cats[advgbCategory.slug] = {\r\n                    title: advgbCategory.title,\r\n                    blocks: []\r\n                };\r\n            }\r\n\r\n            // Then add all other categories\r\n            blocksData.categories.forEach(cat => {\r\n                if (cat.slug !== 'advgb-category') {\r\n                    cats[cat.slug] = {\r\n                        title: cat.title,\r\n                        blocks: []\r\n                    };\r\n                }\r\n            });\r\n\r\n            // Assign blocks to categories\r\n            blocksData.blocks.forEach(block => {\r\n                const catSlug = block.category || 'common';\r\n                if (!cats[catSlug]) {\r\n                    cats[catSlug] = {\r\n                        title: block.categoryTitle || catSlug,\r\n                        blocks: []\r\n                    };\r\n                }\r\n                cats[catSlug].blocks.push(block);\r\n            });\r\n\r\n            return cats;\r\n        }, [blocksData.categories, blocksData.blocks]);\r\n\r\n        const filteredCategories = useMemo(() => {\r\n            if (showEmptyBlocks) return categories;\r\n\r\n            const filtered = {};\r\n            Object.entries(categories).forEach(([slug, category]) => {\r\n                const filteredBlocks = category.blocks.filter(bt => {\r\n                    return data.usage[bt.name] && Object.keys(data.usage[bt.name].posts).length > 0;\r\n                });\r\n\r\n                if (filteredBlocks.length > 0) {\r\n                    filtered[slug] = {\r\n                        ...category,\r\n                        blocks: filteredBlocks\r\n                    };\r\n                }\r\n            });\r\n\r\n            return filtered;\r\n        }, [categories, data.usage, showEmptyBlocks]);\r\n\r\n        const categoryStats = useMemo(() => {\r\n            const stats = {};\r\n\r\n            Object.entries(filteredCategories).forEach(([slug, category]) => {\r\n                let totalBlocks = category.blocks.length;\r\n                let totalLocations = 0;\r\n                let totalInstances = 0;\r\n\r\n                category.blocks.forEach(block => {\r\n                    const blockData = data.usage[block.name];\r\n                    if (blockData && blockData.posts) {\r\n                        totalLocations += Object.keys(blockData.posts).length;\r\n                        totalInstances += blockData.total || 0;\r\n                    }\r\n                });\r\n\r\n                stats[slug] = {\r\n                    blocks: totalBlocks,\r\n                    locations: totalLocations,\r\n                    instances: totalInstances\r\n                };\r\n            });\r\n\r\n            return stats;\r\n        }, [filteredCategories, data.usage]);\r\n\r\n        useEffect(() => {\r\n            if (!selected && blocksData.blocks.length > 0 && initialLoadComplete) {\r\n                const firstCategory = Object.values(filteredCategories)[0];\r\n                if (firstCategory && firstCategory.blocks.length > 0) {\r\n                    setSelected(firstCategory.blocks[0]);\r\n                }\r\n            }\r\n        }, [filteredCategories, blocksData.blocks, initialLoadComplete]);\r\n\r\n        const scanAll = async () => {\r\n            setLoadingAll(true);\r\n            setScanProgress({\r\n                current: 0,\r\n                total: 0,\r\n                status: __('Initializing scan...', 'advanced-gutenberg'),\r\n                completed: false\r\n            });\r\n\r\n            try {\r\n                let offset = 0;\r\n                const batchSize = 20;\r\n                let newData = {\r\n                    usage: {},\r\n                    posts: [],\r\n                    lastScanDate: ''\r\n                };\r\n                let totalPosts = 0;\r\n                let hasMorePosts = true;\r\n\r\n                while (hasMorePosts) {\r\n                    setScanProgress(prev => ({\r\n                        ...prev,\r\n                        status: sprintf(\r\n                            __('Processing posts (%1$s/%2$s)', 'advanced-gutenberg'),\r\n                            offset.toLocaleString(),\r\n                            totalPosts.toLocaleString()\r\n                        )\r\n                    }));\r\n\r\n                    const batchResponse = await postAjax('pp_blocks-usage_scan_batch', {\r\n                        offset,\r\n                        batch_size: batchSize,\r\n                        post_types: selectedPostTypes\r\n                    });\r\n\r\n                    if (!batchResponse.success) {\r\n                        throw new Error(__('Batch scan failed', 'advanced-gutenberg'));\r\n                    }\r\n\r\n                    if (batchResponse.data.total) {\r\n                        totalPosts = batchResponse.data.total;\r\n                    }\r\n\r\n                    // Merge usage data\r\n                    Object.entries(batchResponse.data.usage || {}).forEach(([blockName, blockData]) => {\r\n                        if (!newData.usage[blockName]) {\r\n                            newData.usage[blockName] = {\r\n                                posts: {},\r\n                                total: 0\r\n                            };\r\n                        }\r\n\r\n                        Object.entries(blockData.posts || {}).forEach(([postId, entry]) => {\r\n                            newData.usage[blockName].posts[postId] = entry;\r\n                        });\r\n\r\n                        newData.usage[blockName].total += blockData.total || 0;\r\n                    });\r\n\r\n                    // Merge posts\r\n                    newData.posts = [...newData.posts, ...(batchResponse.data.posts || [])];\r\n                    newData.lastScanDate = batchResponse.data.lastScanDate || newData.lastScanDate;\r\n\r\n                    offset += batchResponse.data.processed || 0;\r\n                    hasMorePosts = offset < totalPosts;\r\n\r\n                    setScanProgress(prev => ({\r\n                        ...prev,\r\n                        current: offset,\r\n                        total: totalPosts\r\n                    }));\r\n\r\n                    // Update local state with the new data\r\n                    setData(newData);\r\n\r\n                    // Save to IndexedDB after each batch\r\n                    try {\r\n                        await saveToCache('block_usage_data', newData);\r\n                    } catch (error) {\r\n                        console.error('Failed to save batch to IndexedDB:', error);\r\n                        // Continue with next batch even if save fails\r\n                    }\r\n\r\n                    await new Promise(resolve => setTimeout(resolve, 100));\r\n                }\r\n\r\n                setScanProgress(prev => ({\r\n                    ...prev,\r\n                    completed: true,\r\n                    status: __('Scan completed successfully!', 'advanced-gutenberg')\r\n                }));\r\n            } catch (error) {\r\n                console.error('Scan error:', error);\r\n                setScanProgress(prev => ({\r\n                    ...prev,\r\n                    status: __('Scan failed: ', 'advanced-gutenberg') + error.message\r\n                }));\r\n            } finally {\r\n                setTimeout(() => {\r\n                    setLoadingAll(false);\r\n                    setScanProgress({\r\n                        current: 0,\r\n                        total: 0,\r\n                        status: '',\r\n                        completed: false\r\n                    });\r\n                }, 2000);\r\n            }\r\n        };\r\n\r\n        const clearAllData = async () => {\r\n            setLoadingClearAll(true);\r\n            try {\r\n                await clearCache();\r\n                setData({\r\n                    usage: {},\r\n                    posts: [],\r\n                    lastScanDate: ''\r\n                });\r\n                setShowEmptyBlocks(false);\r\n                setSelected(null);\r\n\r\n                // Clear settings as well\r\n                await saveToCache('block_usage_settings', {\r\n                    showEmptyBlocks: false,\r\n                    lastSelectedBlock: ''\r\n                });\r\n            } catch (error) {\r\n                console.error('Failed to clear data:', error);\r\n                setDbError(__('Failed to clear data. Please try again.', 'advanced-gutenberg'));\r\n            } finally {\r\n                setLoadingClearAll(false);\r\n            }\r\n        };\r\n\r\n        const handleDetailsClick = async (bt) => {\r\n            const newSelected = selected?.name === bt.name ? null : bt;\r\n            setSelected(newSelected);\r\n\r\n            // Save the last selected block\r\n            if (newSelected) {\r\n                try {\r\n                    await saveToCache('block_usage_settings', {\r\n                        showEmptyBlocks,\r\n                        lastSelectedBlock: newSelected.name\r\n                    });\r\n                } catch (error) {\r\n                    console.error('Failed to save last selected block:', error);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (!initialLoadComplete) {\r\n            return (\r\n                <div className=\"pp-blocks-usage-wrapper\">\r\n                    <div className=\"advgb-block-feature-loading-msg\" style={{ display: 'block' }}>\r\n                        {__('Loading...', 'advanced-gutenberg')} <Spinner />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className={`pp-blocks-usage-wrapper ${selected ? 'has-sidebar' : ''}`}>\r\n                {dbError && (\r\n                    <Notice status=\"error\" onRemove={() => setDbError(null)}>\r\n                        {dbError}\r\n                    </Notice>\r\n                )}\r\n\r\n                <div className=\"pp-blocks-usage-header\">\r\n                    <Flex justify=\"space-between\" align=\"center\">\r\n                        <FlexItem>\r\n                            <div className=\"pp-blocks-usage-controls\">\r\n                                {window.advgb_block_usage_data?.postTypes && (\r\n                                    <div className=\"pp-blocks-usage-post-type-selector\">\r\n                                        <FormTokenField\r\n                                            label={__('Limit Scan to Post Types:', 'advanced-gutenberg')}\r\n                                            value={selectedPostTypes}\r\n                                            suggestions={Object.keys(window.advgb_block_usage_data.postTypes)}\r\n                                            onChange={(newPostTypes) => handlePostTypeChange(newPostTypes)}\r\n                                            displayTransform={(postType) => window.advgb_block_usage_data.postTypes[postType] || postType}\r\n                                            tokenizeOnSpace={false}\r\n                                            __experimentalExpandOnFocus={true}\r\n                                            __experimentalShowHowTo={false}\r\n                                            style={{ minWidth: '300px' }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                                <Button variant=\"primary\" onClick={scanAll} disabled={loadingAll}>\r\n                                    {loadingAll ? <Spinner /> : __('Scan Block Usage', 'advanced-gutenberg')}\r\n                                </Button>\r\n                            </div>\r\n                        </FlexItem>\r\n                        <FlexItem>\r\n                            <div className=\"advgb-toggle-wrapper\">\r\n                                {__('Show Empty Blocks', 'advanced-gutenberg')}\r\n                                <div className=\"advgb-switch-button\">\r\n                                    <label className=\"switch\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            name=\"toggle_empty_blocks\"\r\n                                            id=\"toggle_empty_blocks\"\r\n                                            checked={showEmptyBlocks}\r\n                                            onChange={(e) => handleToggleChange(e.target.checked)}\r\n                                        />\r\n                                        <span className=\"slider\"></span>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </FlexItem>\r\n                    </Flex>\r\n                </div>\r\n\r\n                {loadingAll && (\r\n                    <div className=\"scan-progress-container\">\r\n                        <div className=\"scan-progress\">\r\n                            <p>{scanProgress.status}</p>\r\n                            <div className=\"progress-wrap\"><ProgressBar\r\n                                value={scanProgress.total > 0 ? (scanProgress.current / scanProgress.total) * 100 : 0}\r\n                            /></div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {data.lastScanDate && (\r\n                    <div className=\"pp-blocks-usage-last-scan\">\r\n                        <span>{__('Last scan:', 'advanced-gutenberg')} {new Date(data.lastScanDate).toLocaleString()}</span>\r\n                        <div className=\"ppb-tooltips-library\" data-toggle=\"ppbtooltip\" data-placement=\"left\">\r\n                            {!loadingClearAll &&\r\n                                <span className=\"dashicons dashicons-editor-help\" style={{ verticalAlign: 'middle', lineHeight: 'inherit' }}></span>\r\n                            }\r\n                            <Button\r\n                                variant=\"secondary\"\r\n                                onClick={clearAllData}\r\n                                disabled={loadingAll || loadingClearAll}\r\n                                className=\"is-destructive\"\r\n                                style={{ marginLeft: '8px' }}\r\n                            >\r\n                                {loadingClearAll ? <Spinner /> : __('Clear All Data', 'advanced-gutenberg')}\r\n                            </Button>\r\n                            {!loadingClearAll &&\r\n                                <span className=\"tooltip-text\">\r\n                                    <span>{__('Scan data is stored in your browser to improve performance and handle large datasets. This keeps your WordPress database clean. Click to permanently delete all stored data.', 'advanced-gutenberg')}</span>\r\n                                    <i></i>\r\n                                </span>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"pp-blocks-usage-container\">\r\n                    <div className=\"pp-blocks-usage-categories\">\r\n                        {Object.entries(filteredCategories).map(([slug, { title, blocks }]) => {\r\n                            const stats = categoryStats[slug] || { blocks: 0, locations: 0, instances: 0 };\r\n\r\n                            const pluralize = (count, singular, plural) => {\r\n                                return count === 1 ? singular : plural;\r\n                            };\r\n\r\n                            const categoryTitle = (\r\n                                <span className=\"pp-blocks-usage-category-title\">\r\n                                    <span className=\"category-name\">{title}</span>\r\n                                    <span className=\"category-stats\">\r\n                                        ({stats.blocks} {pluralize(stats.blocks, __('block', 'advanced-gutenberg'), __('blocks', 'advanced-gutenberg'))}, {stats.locations} {pluralize(stats.locations, __('location', 'advanced-gutenberg'), __('locations', 'advanced-gutenberg'))}, {stats.instances} {pluralize(stats.instances, __('instance', 'advanced-gutenberg'), __('instances', 'advanced-gutenberg'))})\r\n                                    </span>\r\n                                </span>\r\n                            );\r\n                            return (\r\n\r\n                                <PanelBody key={slug} title={categoryTitle} initialOpen>\r\n                                    <div className=\"pp-blocks-usage-block-grid\">\r\n                                        {blocks.map(bt => {\r\n                                            const hasData = data.usage[bt.name] && Object.keys(data.usage[bt.name].posts).length > 0;\r\n                                            const blockData = data.usage[bt.name] || { posts: {}, total: 0 };\r\n                                            const postCount = Object.keys(blockData.posts).length;\r\n                                            const useCount = blockData.total;\r\n                                            const lastScanned = Object.values(blockData.posts)[0]?.scanned || '';\r\n\r\n                                            return (\r\n                                                <Card\r\n                                                    key={bt.name}\r\n                                                    className={`pp-blocks-usage-block-tile ${selected?.name === bt.name ? 'active' : ''}`}\r\n                                                    onClick={() => handleDetailsClick(bt)}\r\n                                                >\r\n                                                    <div className=\"pp-blocks-usage-tile-main\">\r\n                                                        {bt.icon && (\r\n                                                            <span className=\"block-icon\" style={bt.iconColor ? { color: bt.iconColor } : {}}>\r\n                                                                {typeof bt.icon === 'string' && !bt.icon.includes('<') ? (\r\n                                                                    <span className={`dashicons dashicons-${bt.icon}`}></span>\r\n                                                                ) : (\r\n                                                                    <span dangerouslySetInnerHTML={{ __html: bt.icon }} />\r\n                                                                )}\r\n                                                            </span>\r\n                                                        )}\r\n                                                        <span>{bt.title}</span>\r\n                                                    </div>\r\n                                                    {hasData ? (\r\n                                                        <div className=\"pp-blocks-usage-tile-counts\">\r\n                                                            <div>{__('Locations:', 'advanced-gutenberg')} {postCount}</div>\r\n                                                            <div>{__('Instances:', 'advanced-gutenberg')} {useCount}</div>\r\n                                                        </div>\r\n                                                    ) : (\r\n                                                        <div className=\"pp-blocks-usage-tile-counts\">\r\n                                                            <div className=\"no-scan\">\r\n                                                                {data.lastScanDate\r\n                                                                    ? __('Not found in any posts', 'advanced-gutenberg')\r\n                                                                    : __('No scan history', 'advanced-gutenberg')}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )}\r\n                                                    <div className=\"pp-blocks-usage-tile-actions\">\r\n                                                        <Button variant=\"secondary\" size=\"small\" onClick={(e) => {\r\n                                                            e.stopPropagation();\r\n                                                            handleDetailsClick(bt);\r\n                                                        }}>\r\n                                                            {__('Details', 'advanced-gutenberg')}\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </Card>\r\n                                            );\r\n                                        })}\r\n                                    </div>\r\n                                </PanelBody>\r\n                            );\r\n                        })}\r\n                    </div>\r\n\r\n                    {selected && (\r\n                        <Sidebar\r\n                            key={selected.name}\r\n                            selected={selected}\r\n                            data={data}\r\n                            onClose={() => setSelected(null)}\r\n                            canEditPosts={currentUser?.canEditPosts || false}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // Only render the app if wp.blocks is available\r\n    if (typeof wp !== 'undefined' && typeof wp.blocks !== 'undefined') {\r\n        render(<App />, document.getElementById('advgb-block-usage-app'));\r\n    } else {\r\n        const appContainer = document.getElementById('advgb-block-usage-app');\r\n        if (appContainer) {\r\n            appContainer.innerHTML = '<p>' + __('Error Loading blocks data...', 'advanced-gutenberg') + '</p>';\r\n        }\r\n    }\r\n\r\n})(wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element);"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","render","useState","useEffect","useRef","useMemo","PanelBody","Button","Card","Spinner","Flex","FlexItem","ProgressBar","Notice","FormTokenField","__","sprintf","STORE_NAME","EXCLUDED_BLOCKS","openDatabase","reject","request","indexedDB","open","onerror","event","console","error","target","onsuccess","result","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","keyPath","getFromCache","_ref","_callee","key","_context","transaction","objectStore","get","t0","_x","saveToCache","_ref2","_callee2","_context2","put","_x2","_x3","clearCache","_ref3","_callee3","_context3","clear","Sidebar","React","memo","_ref5","selected","data","canEditPosts","onClose","_useState2","_slicedToArray","expandedPost","setExpandedPost","_data$usage","usage","_data$posts","posts","blockData","total","postIds","blockPosts","filter","post","includes","post_id","toString","groupedPosts","groups","_blockData$posts$post","_blockData$posts$post2","count","scanned","concat","post_title","_objectSpread","totalCount","groupBlocksByName","blocks","grouped","block","_grouped$key$innerBlo","innerBlocks","_toConsumableArray","renderBlockItem","depth","undefined","groupedInnerBlocks","createElement","clientId","Math","random","substr","className","style","marginLeft","icon","iconColor","color","dangerouslySetInnerHTML","__html","map","innerBlock","ref","title","description","category","Fragment","_post$blocks","isExpanded","postTypeLabel","post_type","onClick","size","edit_link","variant","isSmall","href","view_link","lastScanDate","Date","toLocaleString","App","_window$advgb_block_u","_ref6","window","advgb_block_usage_data","_ref6$ajaxUrl","ajaxUrl","_ref6$nonce","nonce","initialData","currentUser","_useState4","wp","categories","blockLibrary","registerCoreBlocks","allBlocks","getBlockTypes","allCategories","getCategories","listBlocks","localizedCategories","blockCategories","categoryTitleMap","reduce","cat","slug","_ref4$saved_blocks","saved_blocks","diff_blocks","blocksA","some","blocksB","blockItemIcon","blockItem","src","parent","categoryTitle","savedIcon","foreground","element","renderToString","replace","components","Dashicon","uniqueNames","splice","sort","b","localizedCat","getBlocks","blocksData","_useState6","setData","_useState8","loadingAll","setLoadingAll","_useState10","loadingClearAll","setLoadingClearAll","_useState12","setSelected","_useState14","showEmptyBlocks","setShowEmptyBlocks","_useState16","selectedPostTypes","setSelectedPostTypes","_useState18","current","status","completed","scanProgress","setScanProgress","_useState20","dbError","setDbError","_useState22","initialLoadComplete","setInitialLoadComplete","loadData","_ref7","_callee4","cachedData","cachedSettings","lastSelected","_context4","lastSelectedBlock","find","postAjax","action","body","URLSearchParams","fetch","headers","json","handleToggleChange","_ref8","_callee5","_context5","_x4","handlePostTypeChange","_ref9","_callee6","newPostTypes","_context6","_x5","cats","advgbCategory","catSlug","filteredCategories","filtered","entries","_ref10","_ref11","filteredBlocks","bt","categoryStats","stats","_ref12","_ref13","totalBlocks","totalLocations","totalInstances","locations","instances","firstCategory","scanAll","_ref14","_callee7","offset","batchSize","newData","totalPosts","hasMorePosts","batchResponse","_context7","batch_size","post_types","success","_ref15","_ref16","blockName","_ref17","_ref18","postId","entry","processed","setTimeout","t1","message","clearAllData","_ref19","_callee8","_context8","handleDetailsClick","_ref20","_callee9","newSelected","_context9","_x6","onRemove","justify","align","postTypes","label","suggestions","onChange","displayTransform","postType","tokenizeOnSpace","__experimentalExpandOnFocus","__experimentalShowHowTo","minWidth","disabled","id","checked","verticalAlign","lineHeight","_ref21","_ref22","_ref22$","pluralize","singular","plural","initialOpen","_Object$values$","hasData","postCount","useCount","stopPropagation","display","document","getElementById","appContainer","innerHTML","i18n","hooks","blockEditor","compose"],"sourceRoot":""}