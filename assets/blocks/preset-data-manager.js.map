{"version":3,"file":"preset-data-manager.js","mappings":"+xCACA,WACI,aAEAA,OAAOC,gBAAkB,CACrBC,QAA8C,oBAA9BC,2BAA6CA,0BAA0BD,QACjFC,0BAA0BD,QAC1B,GAENE,YAAa,GAGbC,UAAS,SAACC,GACNC,KAAKH,YAAYI,KAAKF,EAC1B,EAGAG,YAAW,SAACH,GACRC,KAAKH,YAAcG,KAAKH,YAAYM,QAAO,SAAAC,GAAG,OAAIA,IAAQL,CAAQ,GACtE,EAGAM,kBAAiB,WAAG,IAAAC,EAAA,KAChBN,KAAKH,YAAYU,SAAQ,SAAAR,GACrB,IACIA,EAASO,EAAKX,QAClB,CAAE,MAAOa,GACLC,QAAQD,MAAM,mCAAoCA,EACtD,CACJ,GACJ,EAGAE,cAAa,SAACC,GACVX,KAAKL,QAAUiB,MAAMC,QAAQF,GAAcA,EAAa,GAGf,oBAA9Bf,4BACPA,0BAA0BD,QAAUK,KAAKL,SAG7CK,KAAKK,mBACT,EAGAS,UAAS,SAACC,GACFA,GAAUA,EAAOC,KACjBhB,KAAKL,QAAQM,KAAKc,GAClBf,KAAKiB,kBACLjB,KAAKK,oBAEb,EAGAa,aAAY,SAACC,EAAUC,GACnB,IAAMC,EAAQrB,KAAKL,QAAQ2B,WAAU,SAAAC,GAAC,OAAIA,EAAEP,KAAOG,CAAQ,KAC5C,IAAXE,IACArB,KAAKL,QAAQ0B,GAAMG,EAAAA,EAAA,GAAQxB,KAAKL,QAAQ0B,IAAWD,GACnDpB,KAAKiB,kBACLjB,KAAKK,oBAEb,EAGAoB,aAAY,SAACN,GACTnB,KAAKL,QAAUK,KAAKL,QAAQQ,QAAO,SAAAoB,GAAC,OAAIA,EAAEP,KAAOG,CAAQ,IACzDnB,KAAKiB,kBACLjB,KAAKK,mBACT,EAGAqB,UAAS,SAACP,GACN,OAAOnB,KAAKL,QAAQgC,MAAK,SAAAJ,GAAC,OAAIA,EAAEP,KAAOG,CAAQ,GACnD,EAGAS,cAAa,WACT,O,+CAAW5B,KAAKL,U,ujBACpB,EAGAsB,gBAAe,WAC8B,oBAA9BrB,4BACPA,0BAA0BD,QAAUK,KAAKL,QAEjD,GAIqC,oBAA9BC,2BAA6CA,0BAA0BD,UAC9EF,OAAOC,gBAAgBC,QAAUiB,MAAMC,QAAQjB,0BAA0BD,SACnEC,0BAA0BD,QAC1B,GAEb,CA7FD,E","sources":["webpack://advanced-gutenberg/./assets/blocks/block-controls/preset-data-manager.jsx"],"sourcesContent":["// Global Preset Data Manager\r\n(function () {\r\n    'use strict';\r\n\r\n    window.AdvGBPresetData = {\r\n        presets: typeof advgb_block_controls_vars !== 'undefined' && advgb_block_controls_vars.presets\r\n            ? advgb_block_controls_vars.presets\r\n            : [],\r\n\r\n        subscribers: [],\r\n\r\n        // Subscribe to preset data changes\r\n        subscribe(callback) {\r\n            this.subscribers.push(callback);\r\n        },\r\n\r\n        // Unsubscribe from preset data changes\r\n        unsubscribe(callback) {\r\n            this.subscribers = this.subscribers.filter(sub => sub !== callback);\r\n        },\r\n\r\n        // Notify all subscribers of data changes\r\n        notifySubscribers() {\r\n            this.subscribers.forEach(callback => {\r\n                try {\r\n                    callback(this.presets);\r\n                } catch (error) {\r\n                    console.error('Error in preset data subscriber:', error);\r\n                }\r\n            });\r\n        },\r\n\r\n        // Update all presets data\r\n        updatePresets(newPresets) {\r\n            this.presets = Array.isArray(newPresets) ? newPresets : [];\r\n\r\n            // Update the original global variable for backward compatibility\r\n            if (typeof advgb_block_controls_vars !== 'undefined') {\r\n                advgb_block_controls_vars.presets = this.presets;\r\n            }\r\n\r\n            this.notifySubscribers();\r\n        },\r\n\r\n        // Add a new preset\r\n        addPreset(preset) {\r\n            if (preset && preset.id) {\r\n                this.presets.push(preset);\r\n                this.updateGlobalVar();\r\n                this.notifySubscribers();\r\n            }\r\n        },\r\n\r\n        // Update an existing preset\r\n        updatePreset(presetId, updatedPreset) {\r\n            const index = this.presets.findIndex(p => p.id === presetId);\r\n            if (index !== -1) {\r\n                this.presets[index] = { ...this.presets[index], ...updatedPreset };\r\n                this.updateGlobalVar();\r\n                this.notifySubscribers();\r\n            }\r\n        },\r\n\r\n        // Remove a preset\r\n        removePreset(presetId) {\r\n            this.presets = this.presets.filter(p => p.id !== presetId);\r\n            this.updateGlobalVar();\r\n            this.notifySubscribers();\r\n        },\r\n\r\n        // Get preset by ID\r\n        getPreset(presetId) {\r\n            return this.presets.find(p => p.id === presetId);\r\n        },\r\n\r\n        // Get all presets\r\n        getAllPresets() {\r\n            return [...this.presets];\r\n        },\r\n\r\n        // Update global variable for backward compatibility\r\n        updateGlobalVar() {\r\n            if (typeof advgb_block_controls_vars !== 'undefined') {\r\n                advgb_block_controls_vars.presets = this.presets;\r\n            }\r\n        }\r\n    };\r\n\r\n    // Initialize with existing data\r\n    if (typeof advgb_block_controls_vars !== 'undefined' && advgb_block_controls_vars.presets) {\r\n        window.AdvGBPresetData.presets = Array.isArray(advgb_block_controls_vars.presets)\r\n            ? advgb_block_controls_vars.presets\r\n            : [];\r\n    }\r\n})();"],"names":["window","AdvGBPresetData","presets","advgb_block_controls_vars","subscribers","subscribe","callback","this","push","unsubscribe","filter","sub","notifySubscribers","_this","forEach","error","console","updatePresets","newPresets","Array","isArray","addPreset","preset","id","updateGlobalVar","updatePreset","presetId","updatedPreset","index","findIndex","p","_objectSpread","removePreset","getPreset","find","getAllPresets"],"sourceRoot":""}