{"version":3,"file":"custom-styles.js","mappings":"+NAAA,SAAYA,EAAQC,EAASC,EAAUC,EAAeC,EAAcC,GAChEF,EAAgBG,GAAGC,aAAeD,GAAGE,OACrC,IAAQC,EAAcR,EAAdQ,UACAC,EAAOV,EAAPU,GACAC,EAAoBT,EAApBS,gBACAC,EAAsBT,EAAtBS,kBACAC,EAAkBT,EAAlBS,cACAC,EAA+BT,EAA/BS,2BAIRL,EAAW,2BAA4B,kCAAkC,SAAWM,GAUhF,OATAA,EAASC,WAAaC,EAAeF,EAASC,WAAY,CACtDE,YAAa,CACTC,KAAM,UAEVC,cAAe,CACXD,KAAM,YAIPJ,CACX,SAGoD,IAAzCM,wBAAwBC,cAAgCD,wBAAwBC,cACvFD,wBAAwBC,aAAaC,QAAS,CAC1CC,GAAI,EACJC,MAAOf,EAAI,uBAAwB,sBACnCgB,MAAO,GACPN,cAAe,KAKvBX,EAAW,mBAAoB,sBAAsB,SAAWkB,GAC5D,OAAO,SAAEC,GACL,MAAS,CACLA,EAAMC,YACNC,MAAAC,cAACnB,EAAiB,CAACoB,IAAI,yBACnBF,MAAAC,cAAA,OAAKE,UAAU,+BACXH,MAAAC,cAAClB,EAAa,CACVY,MAAQ,CACJf,EAAI,eAAgB,sBACpBoB,MAAAC,cAAA,QAAME,UAAW,+BACXD,IAAI,uBACJE,MAAQ,CACJC,WAAYP,EAAMZ,WAAWI,cAC7BgB,cAAe,cACfC,aAAc,MACdC,OAAQ,OACRC,MAAO,OACPC,OAAQ,OACRC,QAAS,eACTC,WAAY,WAG1BC,KAAMjC,EAAI,6DAA8D,sBACxEgB,MAAOE,EAAMZ,WAAWE,YACxB0B,QAASvB,wBAAwBC,aAAauB,KAAK,SAAEC,EAAQC,GAIzD,OAHID,EAAOE,QAAO3B,wBAAwBC,aAAcyB,GAAQtB,MAAQqB,EAAOE,OAC3EF,EAAOG,OAAM5B,wBAAwBC,aAAcyB,GAAQrB,MAAQoB,EAAOG,MAEvEH,CACX,IACAI,SAAU,SAAEJ,GACR,IAAQ1B,EAAkBC,wBAAwBC,aAAa6B,QAAQ,SAAEjB,GAAK,OAAMA,EAAMR,QAAUoB,CAAM,IAAG,GAArG1B,cACRQ,EAAMwB,cAAe,CACjBlC,YAAa4B,EACb1B,cAAeA,EACfiC,qBAAiBC,EACjBC,eAAWD,EACXE,cAAUF,GAElB,MAIZxB,MAAAC,cAACJ,EAASV,EAAA,CAACe,IAAI,gCAAmCJ,IAE1D,CACJ,IAGAnB,EAAW,mCAAoC,kCAAkC,SAAWgD,EAAYC,EAAW1C,GAU/G,OATIL,EAAiB+C,EAAW,eAAe,IAAU1C,EAAWE,kBAAiD,IAA3BF,EAAWE,mBAC7D,IAAzBuC,EAAWxB,UAClBwB,EAAWxB,UAAYjB,EAAWE,aAElCuC,EAAWxB,WAAa,IAAMjB,EAAWE,YACzCuC,EAAWxB,UAAYwB,EAAWxB,UAAU0B,SAI7CF,CACX,IAGA,IAAMG,EAAmB9C,GAA4B,SAAE+C,GACnD,OAAO,SAAEjC,GACL,IAAMjB,EAAiBiB,EAAMqB,KAAM,eAAe,GAC9C,OAAOnB,MAAAC,cAAC8B,EAAoBjC,GAGhC,IACIV,EACAU,EAAMZ,WADNE,YAGJ,OAAIA,QAAsC,IAAhBA,EACfY,MAAAC,cAAC8B,EAAc5C,EAAA,GAAMW,EAAK,CAAGK,UAAS,GAAA6B,OAAO5C,MAE7CY,MAAAC,cAAC8B,EAAoBjC,EAEpC,CACJ,GAAG,oBAGHtB,GAAGyD,MAAMtD,UAAW,wBAAyB,gCAAiCmD,EAEjF,CAvHD,CAuHItD,GAAG0D,KAAM1D,GAAGyD,MAAOzD,GAAG2D,OAAQ3D,GAAGC,YAAaD,GAAG4D,WAAY5D,GAAG6D,Q","sources":["webpack://advanced-gutenberg/./assets/blocks/customstyles/custom-styles.jsx"],"sourcesContent":["(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose ) {\r\n    wpBlockEditor = wp.blockEditor || wp.editor;\r\n    const { addFilter } = wpHooks;\r\n    const { __ } = wpI18n;\r\n    const { hasBlockSupport } = wpBlocks;\r\n    const { InspectorControls } = wpBlockEditor;\r\n    const { SelectControl } = wpComponents;\r\n    const { createHigherOrderComponent } = wpCompose;\r\n\r\n\r\n    // Register custom styles to blocks attributes\r\n    addFilter( 'blocks.registerBlockType', 'advgb/registerCustomStyleClass', function ( settings ) {\r\n        settings.attributes = Object.assign( settings.attributes, {\r\n            customStyle: {\r\n                type: 'string'\r\n            },\r\n            identifyColor: {\r\n                type: 'string'\r\n            }\r\n        } );\r\n\r\n        return settings;\r\n    } );\r\n\r\n    // Add option to return to default style\r\n    if (typeof advgbBlocksCustomStyles.customStyles !== 'undefined' && advgbBlocksCustomStyles.customStyles) {\r\n        advgbBlocksCustomStyles.customStyles.unshift( {\r\n            id: 0,\r\n            label: __( 'Select a block style', 'advanced-gutenberg' ),\r\n            value: '',\r\n            identifyColor: ''\r\n        } );\r\n    }\r\n\r\n    // Add option to select custom styles for supported blocks\r\n    addFilter( 'editor.BlockEdit', 'advgb/customStyles', function ( BlockEdit ) {\r\n        return ( props ) => {\r\n            return ( [\r\n                props.isSelected &&\r\n                <InspectorControls key=\"advgb-custom-controls\">\r\n                    <div className=\"advgb-custom-styles-wrapper\">\r\n                        <SelectControl\r\n                            label={ [\r\n                                __( 'Block styles', 'advanced-gutenberg' ),\r\n                                <span className={'components-panel__color-area'}\r\n                                      key=\"customstyle-identify\"\r\n                                      style={ {\r\n                                          background: props.attributes.identifyColor,\r\n                                          verticalAlign: 'text-bottom',\r\n                                          borderRadius: '50%',\r\n                                          border: 'none',\r\n                                          width: '16px',\r\n                                          height: '16px',\r\n                                          display: 'inline-block',\r\n                                          marginLeft: '10px',\r\n                                      } } />\r\n                            ] }\r\n                            help={__( 'This option let you add custom style for the current block', 'advanced-gutenberg' )}\r\n                            value={props.attributes.customStyle}\r\n                            options={advgbBlocksCustomStyles.customStyles.map( ( cstyle, index ) => {\r\n                                if (cstyle.title) advgbBlocksCustomStyles.customStyles[ index ].label = cstyle.title;\r\n                                if (cstyle.name) advgbBlocksCustomStyles.customStyles[ index ].value = cstyle.name;\r\n\r\n                                return cstyle;\r\n                            } )}\r\n                            onChange={( cstyle ) => {\r\n                                const { identifyColor } = advgbBlocksCustomStyles.customStyles.filter( ( style ) => style.value === cstyle )[0];\r\n                                props.setAttributes( {\r\n                                    customStyle: cstyle,\r\n                                    identifyColor: identifyColor,\r\n                                    backgroundColor: undefined,\r\n                                    textColor: undefined,\r\n                                    fontSize: undefined,\r\n                                } );\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </InspectorControls>,\r\n                <BlockEdit key=\"block-edit-custom-class-name\" {...props} />\r\n            ] )\r\n        }\r\n    } );\r\n\r\n    // Apply custom styles on front-end\r\n    addFilter( 'blocks.getSaveContent.extraProps', 'advgb/loadFrontendCustomStyles', function ( extraProps, blockType, attributes ) {\r\n        if (hasBlockSupport( blockType, 'customStyle', true ) && attributes.customStyle && typeof attributes.customStyle !== 'undefined') {\r\n            if (typeof extraProps.className === 'undefined') {\r\n                extraProps.className = attributes.customStyle;\r\n            } else {\r\n                extraProps.className += ' ' + attributes.customStyle;\r\n                extraProps.className = extraProps.className.trim();\r\n            }\r\n        }\r\n\r\n        return extraProps;\r\n    } );\r\n\r\n\r\n    const withStyleClasses = createHigherOrderComponent( ( BlockListBlock ) => {\r\n        return ( props ) => {\r\n            if ( !hasBlockSupport( props.name, 'customStyle', true ) ) {\r\n                return <BlockListBlock { ...props } />\r\n            }\r\n\r\n            const {\r\n                customStyle,\r\n            } = props.attributes;\r\n\r\n            if (customStyle && typeof customStyle !== 'undefined') {\r\n                return <BlockListBlock { ...props } className={ `${ customStyle }` } />;\r\n            } else {\r\n                return <BlockListBlock { ...props } />\r\n            }\r\n        };\r\n    }, 'withStyleClasses' );\r\n\r\n    // Apply custom styles on back-end\r\n    wp.hooks.addFilter( 'editor.BlockListBlock', 'advgb/loadBackendCustomStyles', withStyleClasses );\r\n\r\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose );\r\n"],"names":["wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wp","blockEditor","editor","addFilter","__","hasBlockSupport","InspectorControls","SelectControl","createHigherOrderComponent","settings","attributes","_extends","customStyle","type","identifyColor","advgbBlocksCustomStyles","customStyles","unshift","id","label","value","BlockEdit","props","isSelected","React","createElement","key","className","style","background","verticalAlign","borderRadius","border","width","height","display","marginLeft","help","options","map","cstyle","index","title","name","onChange","filter","setAttributes","backgroundColor","undefined","textColor","fontSize","extraProps","blockType","trim","withStyleClasses","BlockListBlock","concat","hooks","i18n","blocks","components","compose"],"sourceRoot":""}